<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat Page</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        margin: 0 auto;
        padding: 0;
        display: flex;
        flex-direction: column;
        height: 100vh;
        background: linear-gradient(135deg, #a0c0ff 0%, #a9c9ff 100%);
        width: 100%;
        max-width: 900px;
      }

      .chat-container {
        background: #ffffff;
        border-radius: 24px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
        overflow: hidden;
        margin: 20px;
        height: calc(100vh - 40px);
        display: flex;
        flex-direction: column;
      }

      .header {
        background: linear-gradient(135deg, #091859 0%, #0c1b50 100%);
        padding: 20px 24px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-bottom: none;
      }

      .header .user-info {
        display: flex;
        align-items: center;
        color: white;
      }

      .header img {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        margin-right: 16px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        object-fit: cover;
      }

      .header .user-name {
        font-weight: 600;
        font-size: 18px;
        margin-bottom: 2px;
      }

      .header .status {
        display: inline-block;
        width: 12px;
        height: 12px;
        background-color: #4ade80;
        border-radius: 50%;
        margin-left: 8px;
        border: 2px solid white;
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0% {
          box-shadow: 0 0 0 0 rgba(74, 222, 128, 0.7);
        }
        70% {
          box-shadow: 0 0 0 10px rgba(74, 222, 128, 0);
        }
        100% {
          box-shadow: 0 0 0 0 rgba(74, 222, 128, 0);
        }
      }

      .back-button {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 12px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
      }

      .back-button:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-1px);
      }

      .chat-area {
        flex: 1;
        padding: 24px;
        overflow-y: auto;
        background: #f8fafc;
        position: relative;
      }

      .chat-area::-webkit-scrollbar {
        width: 6px;
      }

      .chat-area::-webkit-scrollbar-track {
        background: transparent;
      }

      .chat-area::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 10px;
      }

      .chat-area::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
      }

      .message {
        margin: 16px 0;
        display: flex;
        align-items: flex-end;
        animation: fadeInUp 0.4s ease;
      }

      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .message.sent {
        justify-content: flex-end;
      }

      .message.received {
        justify-content: flex-start;
      }

      .message img {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        margin: 0 12px;
        border: 2px solid #e2e8f0;
        object-fit: cover;
      }

      .message .bubble {
        padding: 14px 18px;
        border-radius: 20px;
        max-width: 70%;
        position: relative;
        font-size: 15px;
        line-height: 1.4;
        word-wrap: break-word;
      }

      .message.sent .bubble {
        background: linear-gradient(135deg, #6692ea 0%, #4b59a2 100%);
        color: white;
        border-bottom-right-radius: 6px;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
      }

      .message.received .bubble {
        background: white;
        color: #1e293b;
        border-bottom-left-radius: 6px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
      }

      .message .time {
        font-size: 12px;
        color: #64748b;
        margin: 0 12px;
        align-self: flex-end;
        margin-bottom: 4px;
        font-weight: 400;
      }

      .input-area {
        display: flex;
        padding: 20px 24px;
        background: white;
        border-top: 1px solid #e2e8f0;
        align-items: center;
      }

      .input-area form {
        display: flex;
        width: 100%;
        gap: 12px;
      }

      .input-area input {
        flex: 1;
        padding: 14px 20px;
        border: 2px solid #e2e8f0;
        border-radius: 24px;
        outline: none;
        font-size: 15px;
        font-family: inherit;
        transition: all 0.3s ease;
        background: #f8fafc;
      }

      .input-area input:focus {
        border-color: #667eea;
        background: white;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      }

      .input-area input::placeholder {
        color: #94a3b8;
      }

      .input-area button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 14px;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 48px;
        height: 48px;
        transition: all 0.3s ease;
        font-size: 18px;
      }

      .input-area button:hover {
        transform: scale(1.05);
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
      }

      .input-area button:active {
        transform: scale(0.95);
      }

      .error {
        color: #ef4444;
        padding: 16px 24px;
        text-align: center;
        background: #fef2f2;
        border-left: 4px solid #ef4444;
        margin: 0;
        font-weight: 500;
      }

      .empty-chat {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: #64748b;
        text-align: center;
      }

      .empty-chat .icon {
        font-size: 64px;
        margin-bottom: 16px;
        opacity: 0.5;
      }

      .empty-chat .text {
        font-size: 18px;
        font-weight: 500;
        margin-bottom: 8px;
      }

      .empty-chat .subtext {
        font-size: 14px;
        opacity: 0.7;
      }

      /* Enhanced Chat Features Styles */
      .chat-controls {
        padding: 15px 24px;
        background: white;
        border-bottom: 1px solid #e2e8f0;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 15px;
      }

      .search-container {
        position: relative;
        flex: 1;
        max-width: 300px;
      }

      .search-input {
        width: 100%;
        padding: 8px 35px 8px 12px;
        border: 2px solid #e2e8f0;
        border-radius: 20px;
        font-size: 14px;
        background: #f8fafc;
        transition: all 0.3s ease;
      }

      .search-input:focus {
        outline: none;
        border-color: #667eea;
        background: white;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      }

      .search-icon {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #94a3b8;
        cursor: pointer;
      }

      .chat-actions {
        display: flex;
        gap: 10px;
        align-items: center;
      }

      .action-btn {
        padding: 8px 12px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 12px;
        font-weight: 500;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
      }

      .action-btn.primary {
        background: #667eea;
        color: white;
      }

      .action-btn.secondary {
        background: #f1f5f9;
        color: #475569;
      }

      .action-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
      }

      .typing-indicator {
        display: none;
        padding: 10px 24px;
        font-style: italic;
        color: #64748b;
        font-size: 14px;
        background: #f8fafc;
        border-top: 1px solid #e2e8f0;
      }

      .typing-indicator.show {
        display: block;
        animation: fadeIn 0.3s ease-in;
      }

      .emoji-picker {
        position: absolute;
        bottom: 120px;
        left: 50%;
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        display: none;
        z-index: 1000;
        width: 280px;
      }

      .emoji-picker.show {
        display: block;
        animation: fadeInUp 0.3s ease-out;
      }

      .emoji-grid {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        gap: 5px;
        max-height: 200px;
        overflow-y: auto;
      }

      .emoji {
        padding: 8px;
        text-align: center;
        cursor: pointer;
        border-radius: 6px;
        font-size: 18px;
        transition: background-color 0.2s ease;
      }

      .emoji:hover {
        background: #f1f5f9;
      }

      .message-status {
        font-size: 10px;
        color: #94a3b8;
        margin-top: 2px;
        text-align: right;
      }

      .message.sent .message-status {
        color: rgba(255, 255, 255, 0.7);
      }

      .error-message {
        color: #ef4444;
        font-size: 12px;
        margin-top: 5px;
        display: none;
        padding: 8px 12px;
        background: #fef2f2;
        border-radius: 6px;
        border-left: 3px solid #ef4444;
      }

      .char-counter {
        font-size: 12px;
        color: #64748b;
        margin-left: 10px;
        min-width: 60px;
        text-align: right;
      }

      .char-counter.warning {
        color: #f59e0b;
      }

      .char-counter.danger {
        color: #ef4444;
      }

      /*
      .message-actions {
        position: absolute;
        top: 5px;
        right: 5px;
        display: none;
        background: rgba(0, 0, 0, 0.8);
        border-radius: 6px;
        padding: 4px;
      }

      .message:hover .message-actions {
        display: flex;
      }

      .message-action {
        background: none;
        border: none;
        color: white;
        padding: 4px 6px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
      }

      .message-action:hover {
        background: rgba(255, 255, 255, 0.2);
      }
      */

      .chat-stats {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 6px 10px;
        border-radius: 6px;
        font-size: 12px;
        display: none;
      }

      /* Mobile responsiveness */
      @media (max-width: 768px) {
        body {
          width: 100%;
          margin: 0;
        }

        .chat-container {
          margin: 0;
          border-radius: 0;
          height: 100vh;
        }

        .header {
          padding: 16px 20px;
        }

        .header img {
          width: 40px;
          height: 40px;
        }

        .header .user-name {
          font-size: 16px;
        }

        .chat-area {
          padding: 16px;
        }

        .message .bubble {
          max-width: 85%;
          font-size: 14px;
        }

        .input-area {
          padding: 16px 20px;
        }

        .chat-controls {
          padding: 10px 16px;
          flex-wrap: wrap;
        }

        .search-container {
          max-width: 200px;
        }

        .emoji-picker {
          width: 240px;
        }
      }
    </style>
  </head>
  <body>
    <div class="chat-container">
      <div class="header">
        <div class="user-info">
          <img src="<%= recipient.picture %>" alt="Profile Picture" />
          <div>
            <div class="user-name"><%= recipient.name %></div>
          </div>
          <span class="status"></span>
        </div>
        <button class="back-button" onclick="window.history.back()">
          Go Back
        </button>
      </div>
      <% if (error) { %>
      <div class="error"><%= error %></div>
      <% } %>

      <!-- Enhanced Chat Controls -->
      <div class="chat-controls">
        <div class="search-container">
          <input
            type="text"
            class="search-input"
            id="messageSearch"
            placeholder="Search messages..."
          />
          <svg
            class="search-icon"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </div>
        <div class="chat-actions">
          <button
            class="action-btn secondary"
            id="toggleStats"
            title="Show Chat Statistics"
          >
            <svg
              width="14"
              height="14"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                d="M9 11H5a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2z"
              ></path>
              <path
                d="M21 11h-4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2z"
              ></path>
              <path
                d="M15 3h-4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2z"
              ></path>
            </svg>
            Stats
          </button>
          <button
            class="action-btn primary"
            id="refreshChat"
            title="Refresh Messages"
          >
            <svg
              width="14"
              height="14"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <polyline points="23 4 23 10 17 10"></polyline>
              <polyline points="1 20 1 14 7 14"></polyline>
              <path d="M20.49 9A9 9 0 0 0 5.64 5.64l-.02.02"></path>
              <path d="M3.51 15a9 9 0 0 0 14.85 4.34l.02-.02"></path>
            </svg>
            Refresh
          </button>
        </div>
      </div>

      <!-- Chat Statistics (Hidden by default) -->
      <div class="chat-stats" id="chatStats">
        <div>Messages: <span id="messageCount">0</span></div>
        <div>Last activity: <span id="lastActivity">Now</span></div>
      </div>

      <div class="chat-area" id="chatArea">
        <% if (messages.length === 0) { %>
        <div class="empty-chat">
          <div class="icon">💬</div>
          <div class="text">No messages yet</div>
          <div class="subtext">
            Start a conversation with <%= recipient.name %>
          </div>
        </div>
        <% } else { %> <% messages.forEach(message => { %>
        <div
          class="message <%= message.from === user.id ? 'sent' : 'received' %>"
        >
          <% if (message.from === user.id) { %>
          <div class="time">
            <%= new Date(message.createdAt).toLocaleTimeString([], { hour:
            '2-digit', minute: '2-digit' }) %>
          </div>
          <div class="bubble"><%= message.messageData %></div>
          <img
            src="<%= user.picture || '/assets/user_female.png' %>"
            alt="Profile Picture"
          />
          <% } else { %>
          <img src="<%= recipient.picture %>" alt="Profile Picture" />
          <div class="bubble"><%= message.messageData %></div>
          <div class="time">
            <%= new Date(message.createdAt).toLocaleTimeString([], { hour:
            '2-digit', minute: '2-digit' }) %>
          </div>
          <% } %>
        </div>
        <% }) %> <% } %>
      </div>

      <!-- Typing Indicator -->
      <div class="typing-indicator" id="typingIndicator">
        <span id="typingUser">Someone</span> is typing...
      </div>

      <!-- Enhanced Input Area -->
      <div class="input-area">
        <form
          id="messageForm"
          action="/chat/<%= recipient.userId || '' %>"
          method="POST"
        >
          <div style="display: flex; flex-direction: column; flex: 1">
            <div style="display: flex; align-items: center; gap: 12px">
              <input
                type="text"
                name="messageData"
                id="messageInput"
                placeholder="Type your message..."
                required
                maxlength="1000"
                autocomplete="off"
              />
              <button
                type="button"
                id="emojiBtn"
                title="Add Emoji"
                style="
                  background: none;
                  border: none;
                  font-size: 20px;
                  cursor: pointer;
                  padding: 10px;
                "
              >
                😊
              </button>
              <div class="char-counter" id="charCounter">0/1000</div>
              <button type="submit" id="sendBtn">
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M22 2L11 13"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M22 2L15 22L11 13L2 9L22 2Z"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </button>
            </div>
            <div class="error-message" id="errorMessage"></div>
          </div>
        </form>
      </div>

      <!-- Emoji Picker -->
      <div class="emoji-picker" id="emojiPicker">
        <div class="emoji-grid" id="emojiGrid">
          <!-- Emojis will be populated by JavaScript -->
        </div>
      </div>
    </div>

    <script>
      // Enhanced Chat Application with Form Validation, Dynamic HTML, and AJAX
      document.addEventListener("DOMContentLoaded", function () {
        // Initialize all chat features
        initializeChatFeatures();
      });

      function initializeChatFeatures() {
        initializeFormValidation();
        initializeDynamicElements();
        initializeAJAXFunctionality();
        initializeMessageDisplay();
        setupEventListeners();
      }

      function initializeFormValidation() {
        const messageInput = document.getElementById("messageInput");
        const charCounter = document.getElementById("charCounter");
        const errorMessage = document.getElementById("errorMessage");
        const sendBtn = document.getElementById("sendBtn");

        // Real-time input validation
        messageInput.addEventListener("input", function (e) {
          validateMessageInput(e.target, charCounter, errorMessage, sendBtn);
        });

        // Form submission validation
        document
          .getElementById("messageForm")
          .addEventListener("submit", function (e) {
            if (!validateCompleteMessage(messageInput, errorMessage)) {
              e.preventDefault();
              return false;
            }

            // If validation passes, handle with AJAX instead of traditional form submission
            e.preventDefault();
            sendMessageAJAX(messageInput.value.trim());
          });

        // Prevent empty message submission
        messageInput.addEventListener("keypress", function (e) {
          if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            if (validateCompleteMessage(messageInput, errorMessage)) {
              sendMessageAJAX(messageInput.value.trim());
            }
          }
        });
      }

      function validateMessageInput(input, charCounter, errorMessage, sendBtn) {
        const value = input.value;
        const charCount = value.length;
        const maxLength = 1000;

        // Update character counter
        charCounter.textContent = `${charCount}/${maxLength}`;

        // Reset styling
        input.style.borderColor = "";
        errorMessage.style.display = "none";
        sendBtn.disabled = false;

        // Character limit validation
        if (charCount > maxLength * 0.9) {
          charCounter.className = "char-counter warning";
        } else if (charCount > maxLength * 0.95) {
          charCounter.className = "char-counter danger";
        } else {
          charCounter.className = "char-counter";
        }

        // Length validation
        if (charCount === 0) {
          sendBtn.disabled = true;
          return false;
        }

        if (charCount < 1) {
          showFieldError(input, errorMessage, "Message cannot be empty");
          sendBtn.disabled = true;
          return false;
        }

        if (charCount > maxLength) {
          showFieldError(
            input,
            errorMessage,
            `Message too long (${charCount}/${maxLength} characters)`
          );
          sendBtn.disabled = true;
          return false;
        }

        // Content validation
        const trimmedValue = value.trim();
        if (trimmedValue.length === 0) {
          showFieldError(
            input,
            errorMessage,
            "Message cannot contain only whitespace"
          );
          sendBtn.disabled = true;
          return false;
        }

        // Special characters validation (basic spam prevention)
        const specialCharPattern = /[<>{}]/g;
        if (specialCharPattern.test(value)) {
          showFieldError(
            input,
            errorMessage,
            "Special characters < > { } are not allowed"
          );
          sendBtn.disabled = true;
          return false;
        }

        // Excessive repetition validation
        const repetitionPattern = /(.)\1{4,}/;
        if (repetitionPattern.test(value)) {
          showFieldError(
            input,
            errorMessage,
            "Excessive character repetition detected"
          );
          sendBtn.disabled = true;
          return false;
        }

        // Valid message
        input.style.borderColor = "#10b981";
        return true;
      }

      function validateCompleteMessage(input, errorMessage) {
        const value = input.value.trim();

        if (!value) {
          showFieldError(input, errorMessage, "Please enter a message");
          input.focus();
          return false;
        }

        if (value.length > 1000) {
          showFieldError(input, errorMessage, "Message is too long");
          input.focus();
          return false;
        }

        if (value.length < 1) {
          showFieldError(input, errorMessage, "Message is too short");
          input.focus();
          return false;
        }

        return true;
      }

      function showFieldError(field, errorElement, message) {
        field.style.borderColor = "#ef4444";
        errorElement.textContent = message;
        errorElement.style.display = "block";

        setTimeout(() => {
          errorElement.style.display = "none";
          field.style.borderColor = "";
        }, 3000);
      }

      function initializeDynamicElements() {
        createEmojiPicker();
        initializeTypingIndicator();
        setupChatStats();
        initializeSearchFunctionality();
      }

      function createEmojiPicker() {
        const emojiBtn = document.getElementById("emojiBtn");
        const emojiPicker = document.getElementById("emojiPicker");
        const emojiGrid = document.getElementById("emojiGrid");

        const emojis = [
          "😀",
          "😃",
          "😄",
          "😁",
          "😅",
          "😂",
          "🤣",
          "😊",
          "😇",
          "🙂",
          "😉",
          "😌",
          "😍",
          "🥰",
          "😘",
          "😗",
          "😙",
          "😚",
          "😋",
          "😛",
          "😝",
          "😜",
          "🤪",
          "🤨",
          "🧐",
          "🤓",
          "😎",
          "🤩",
          "🥳",
          "😏",
          "😒",
          "😞",
          "😔",
          "😟",
          "😕",
          "🙁",
          "☹️",
          "😣",
          "😖",
          "😫",
          "😩",
          "🥺",
          "😢",
          "😭",
          "😤",
          "😠",
          "😡",
          "🤬",
          "🤯",
          "😳",
          "🥵",
          "🥶",
          "😱",
          "😨",
          "😰",
          "😥",
          "😓",
          "🤗",
          "🤔",
          "🤭",
          "🤫",
          "🤥",
          "😶",
          "😐",
          "👍",
          "👎",
          "👌",
          "🤝",
          "🙏",
          "💪",
          "❤️",
          "💙",
          "💚",
          "💛",
          "🧡",
          "💜",
          "🖤",
          "🤍",
          "🤎",
          "💯",
        ];

        // Populate emoji grid
        emojis.forEach((emoji) => {
          const emojiElement = document.createElement("div");
          emojiElement.className = "emoji";
          emojiElement.textContent = emoji;
          emojiElement.onclick = () => insertEmoji(emoji);
          emojiGrid.appendChild(emojiElement);
        });

        // Toggle emoji picker
        emojiBtn.addEventListener("click", function (e) {
          e.stopPropagation();
          emojiPicker.classList.toggle("show");
        });

        // Close emoji picker when clicking outside
        document.addEventListener("click", function (e) {
          if (!emojiPicker.contains(e.target) && e.target !== emojiBtn) {
            emojiPicker.classList.remove("show");
          }
        });
      }

      function insertEmoji(emoji) {
        const messageInput = document.getElementById("messageInput");
        const currentValue = messageInput.value;
        const cursorPos = messageInput.selectionStart;

        const newValue =
          currentValue.slice(0, cursorPos) +
          emoji +
          currentValue.slice(cursorPos);
        messageInput.value = newValue;

        // Update cursor position
        messageInput.setSelectionRange(
          cursorPos + emoji.length,
          cursorPos + emoji.length
        );
        messageInput.focus();

        // Trigger validation
        const event = new Event("input", { bubbles: true });
        messageInput.dispatchEvent(event);

        // Hide emoji picker
        document.getElementById("emojiPicker").classList.remove("show");
      }

      function initializeTypingIndicator() {
        const messageInput = document.getElementById("messageInput");
        const typingIndicator = document.getElementById("typingIndicator");
        let typingTimer;

        messageInput.addEventListener("input", function () {
          // Show typing indicator simulation
          clearTimeout(typingTimer);

          if (this.value.length > 0) {
            typingIndicator.classList.add("show");
            document.getElementById("typingUser").textContent = "You";

            typingTimer = setTimeout(() => {
              typingIndicator.classList.remove("show");
            }, 2000);
          } else {
            typingIndicator.classList.remove("show");
          }
        });
      }

      function setupChatStats() {
        const toggleStatsBtn = document.getElementById("toggleStats");
        const chatStats = document.getElementById("chatStats");

        toggleStatsBtn.addEventListener("click", function () {
          chatStats.style.display =
            chatStats.style.display === "block" ? "none" : "block";
          updateChatStatistics();
        });
      }

      function updateChatStatistics() {
        const messages = document.querySelectorAll(".message");
        const messageCount = messages.length;

        document.getElementById("messageCount").textContent = messageCount;

        if (messageCount > 0) {
          const lastMessage = messages[messages.length - 1];
          const timeElement = lastMessage.querySelector(".time");
          document.getElementById("lastActivity").textContent = timeElement
            ? timeElement.textContent
            : "Unknown";
        }
      }

      /*
      function createMessageActions() {
        // Add action buttons to existing messages
        const messages = document.querySelectorAll(".message");
        messages.forEach((message) => {
          addMessageActions(message);
        });
      }

      function addMessageActions(messageElement) {
        const actionsDiv = document.createElement("div");
        actionsDiv.className = "message-actions";

        const copyBtn = document.createElement("button");
        copyBtn.className = "message-action";
        copyBtn.innerHTML = "📋";
        copyBtn.title = "Copy message";
        copyBtn.onclick = () => copyMessage(messageElement);

        const timeBtn = document.createElement("button");
        timeBtn.className = "message-action";
        timeBtn.innerHTML = "🕒";
        timeBtn.title = "Show full timestamp";
        timeBtn.onclick = () => showFullTimestamp(messageElement);

        actionsDiv.appendChild(copyBtn);
        actionsDiv.appendChild(timeBtn);
        messageElement.appendChild(actionsDiv);
      }
      */

      /*
      function copyMessage(messageElement) {
        const bubble = messageElement.querySelector(".bubble");
        if (bubble) {
          navigator.clipboard
            .writeText(bubble.textContent)
            .then(() => {
              showNotification("Message copied to clipboard", "success");
            })
            .catch(() => {
              showNotification("Failed to copy message", "error");
            });
        }
      }

      function showFullTimestamp(messageElement) {
        const timeElement = messageElement.querySelector(".time");
        if (timeElement) {
          const originalText = timeElement.textContent;
          timeElement.textContent = new Date().toLocaleString();

          setTimeout(() => {
            timeElement.textContent = originalText;
          }, 3000);
        }
      }
      */

      function initializeSearchFunctionality() {
        const searchInput = document.getElementById("messageSearch");
        let searchTimeout;

        searchInput.addEventListener("input", function () {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            filterMessages(this.value.toLowerCase());
          }, 300);
        });
      }

      function filterMessages(searchTerm) {
        const messages = document.querySelectorAll(".message");
        let visibleCount = 0;

        messages.forEach((message) => {
          const bubble = message.querySelector(".bubble");
          if (bubble) {
            const messageText = bubble.textContent.toLowerCase();

            if (searchTerm === "" || messageText.includes(searchTerm)) {
              message.style.display = "flex";
              message.style.animation = "fadeIn 0.3s ease-in";
              visibleCount++;
            } else {
              message.style.display = "none";
            }
          }
        });

        // Show search results indicator
        updateSearchResults(searchTerm, visibleCount, messages.length);
      }

      function updateSearchResults(searchTerm, visibleCount, totalCount) {
        let searchIndicator = document.querySelector(".search-results");

        if (searchTerm && visibleCount !== totalCount) {
          if (!searchIndicator) {
            searchIndicator = document.createElement("div");
            searchIndicator.className = "search-results";
            searchIndicator.style.cssText =
              "padding: 10px 24px; background: #fef3c7; border-left: 3px solid #f59e0b; font-size: 14px; color: #92400e;";
            document
              .querySelector(".chat-area")
              .parentNode.insertBefore(
                searchIndicator,
                document.querySelector(".chat-area")
              );
          }

          searchIndicator.textContent = `Showing ${visibleCount} of ${totalCount} messages matching "${searchTerm}"`;
          searchIndicator.style.display = "block";
        } else if (searchIndicator) {
          searchIndicator.style.display = "none";
        }
      }

      function initializeAJAXFunctionality() {
        setupRefreshButton();
        initializeAutoRefresh();
        setupMessagePolling();
      }

      // Real-time message sending with AJAX
      async function sendMessageAJAX(messageText) {
        const recipientId = "<%= recipient.userId %>";
        const sendBtn = document.getElementById("sendBtn");
        const messageInput = document.getElementById("messageInput");

        try {
          // Show loading state
          sendBtn.disabled = true;
          sendBtn.innerHTML =
            '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="3"/><path d="M12 1v6M12 17v6M4.22 4.22l4.24 4.24M15.54 15.54l4.24 4.24M1 12h6M17 12h6M4.22 19.78l4.24-4.24M15.54 8.46l4.24-4.24"/></svg>';

          const response = await fetch(`/chat/${recipientId}/api/send`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              messageData: messageText,
            }),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();

          if (result.success) {
            // Add message to UI immediately (optimistic update)
            addMessageToUI({
              messageData: messageText,
              from: "<%= user.id %>",
              createdAt: new Date().toISOString(),
            });

            // Clear input
            messageInput.value = "";
            document.getElementById("charCounter").textContent = "0/1000";

            // Show success
            showNotification("Message sent", "success");

            // Refresh messages to ensure consistency
            setTimeout(() => {
              refreshMessages();
            }, 1000);
          } else {
            throw new Error(result.message || "Failed to send message");
          }
        } catch (error) {
          console.error("Error sending message:", error);
          showNotification("Failed to send message: " + error.message, "error");

          // Fallback to traditional form submission
          const form = document.getElementById("messageForm");
          const actionUrl = form.getAttribute("action");

          const formData = new FormData();
          formData.append("messageData", messageText);

          try {
            const fallbackResponse = await fetch(actionUrl, {
              method: "POST",
              body: formData,
            });

            if (fallbackResponse.ok) {
              window.location.reload();
            }
          } catch (fallbackError) {
            showNotification("Message sending failed completely", "error");
          }
        } finally {
          // Restore send button
          sendBtn.disabled = false;
          sendBtn.innerHTML = `
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M22 2L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          `;
        }
      }

      // Message refresh functionality
      async function refreshMessages() {
        const recipientId = "<%= recipient.userId %>";

        try {
          showNotification("Refreshing messages...", "info");

          const response = await fetch(`/chat/${recipientId}/api/messages`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (!response.ok) {
            throw new Error("Failed to fetch messages");
          }

          const data = await response.json();

          if (data.success) {
            updateMessageDisplay(data.messages);
            showNotification("Messages refreshed", "success");
            updateChatStatistics();
          } else {
            throw new Error(data.message || "Failed to refresh messages");
          }
        } catch (error) {
          console.error("Error refreshing messages:", error);
          showNotification("Failed to refresh messages", "error");
        }
      }

      // User status checking
      async function checkUserStatus() {
        const recipientId = "<%= recipient.userId %>";

        try {
          const response = await fetch(`/chat/${recipientId}/api/status`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            const data = await response.json();
            updateUserStatus(data.status, data.lastSeen);
          }
        } catch (error) {
          console.error("Error checking user status:", error);
        }
      }

      function updateUserStatus(status, lastSeen) {
        const statusElement = document.querySelector(".status");
        const userInfo = document.querySelector(".user-info");

        if (statusElement) {
          statusElement.style.backgroundColor =
            status === "online" ? "#4ade80" : "#94a3b8";
        }

        // Add last seen info if user is offline
        if (status === "offline" && lastSeen) {
          let lastSeenElement = userInfo.querySelector(".last-seen");
          if (!lastSeenElement) {
            lastSeenElement = document.createElement("div");
            lastSeenElement.className = "last-seen";
            lastSeenElement.style.cssText =
              "font-size: 12px; color: rgba(255,255,255,0.7); margin-top: 2px;";
            userInfo.appendChild(lastSeenElement);
          }
          lastSeenElement.textContent = `Last seen ${new Date(
            lastSeen
          ).toLocaleTimeString()}`;
        }
      }

      // Helper functions for AJAX functionality
      function addMessageToUI(message) {
        const chatArea = document.getElementById("chatArea");
        const messageElement = createMessageElement(message);
        chatArea.appendChild(messageElement);

        // Scroll to bottom
        chatArea.scrollTop = chatArea.scrollHeight;

        // Add message actions - Removed to hide icons
        // addMessageActions(messageElement);
      }

      function createMessageElement(message) {
        const messageDiv = document.createElement("div");
        const isSent = message.from === "<%= user.id %>";
        messageDiv.className = `message ${isSent ? "sent" : "received"}`;

        const time = new Date(message.createdAt).toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });

        if (isSent) {
          messageDiv.innerHTML = `
            <div class="time">${time}</div>
            <div class="bubble">
              ${escapeHtml(message.messageData)}
              <div class="message-status">Sent</div>
            </div>
            <img src="<%= user.picture || '/assets/user_female.png' %>" alt="Profile Picture" />
          `;
        } else {
          messageDiv.innerHTML = `
            <img src="<%= recipient.picture %>" alt="Profile Picture" />
            <div class="bubble">${escapeHtml(message.messageData)}</div>
            <div class="time">${time}</div>
          `;
        }

        return messageDiv;
      }

      function updateMessageDisplay(messages) {
        const chatArea = document.getElementById("chatArea");
        chatArea.innerHTML = "";

        if (messages.length === 0) {
          chatArea.innerHTML = `
            <div class="empty-chat">
              <div class="icon">💬</div>
              <div class="text">No messages yet</div>
              <div class="subtext">Start a conversation with <%= recipient.name %></div>
            </div>
          `;
        } else {
          messages.forEach((message) => {
            const messageElement = createMessageElement(message);
            chatArea.appendChild(messageElement);
          });

          // Scroll to bottom
          setTimeout(() => {
            chatArea.scrollTop = chatArea.scrollHeight;
          }, 100);
        }
      }

      function setupRefreshButton() {
        const refreshBtn = document.getElementById("refreshChat");
        refreshBtn.addEventListener("click", refreshMessages);
      }

      function initializeAutoRefresh() {
        // Check for new messages every 30 seconds
        setInterval(() => {
          refreshMessages();
          checkUserStatus();
        }, 30000);
      }

      function setupMessagePolling() {
        // Initial status check
        checkUserStatus();

        // Poll for new messages every 10 seconds when tab is active
        let pollInterval;

        document.addEventListener("visibilitychange", function () {
          if (document.hidden) {
            clearInterval(pollInterval);
          } else {
            pollInterval = setInterval(refreshMessages, 10000);
          }
        });

        // Start polling if page is visible
        if (!document.hidden) {
          pollInterval = setInterval(refreshMessages, 10000);
        }
      }

      function initializeMessageDisplay() {
        const chatArea = document.querySelector(".chat-area");
        chatArea.scrollTop = chatArea.scrollHeight;

        // Add smooth scrolling behavior when new messages are added
        const observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            if (mutation.addedNodes.length) {
              chatArea.scrollTop = chatArea.scrollHeight;
            }
          });
        });

        observer.observe(chatArea, { childList: true });
      }

      function setupEventListeners() {
        // Handle window resize
        window.addEventListener("resize", function () {
          const chatArea = document.querySelector(".chat-area");
          if (chatArea) {
            chatArea.scrollTop = chatArea.scrollHeight;
          }
        });

        // Handle page visibility changes
        document.addEventListener("visibilitychange", function () {
          if (!document.hidden) {
            // Page became visible, refresh messages
            refreshMessages();
          }
        });
      }

      function showNotification(message, type = "info") {
        // Remove existing notification
        const existingNotification = document.querySelector(".notification");
        if (existingNotification) {
          existingNotification.remove();
        }

        const notification = document.createElement("div");
        notification.className = "notification";
        notification.style.cssText = `
          position: fixed; bottom: 20px; right: 20px; z-index: 1000;
          padding: 12px 20px; border-radius: 8px; color: white; font-weight: 500;
          background: ${
            type === "success"
              ? "#10b981"
              : type === "error"
              ? "#ef4444"
              : "#2563eb"
          };
          box-shadow: 0 4px 15px rgba(0,0,0,0.2);
          animation: slideIn 0.3s ease-out; max-width: 300px; font-size: 14px;
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        // Auto remove after 3 seconds
        setTimeout(() => {
          notification.style.animation = "slideOut 0.3s ease-in";
          setTimeout(() => notification.remove(), 300);
        }, 3000);
      }

      function escapeHtml(text) {
        const div = document.createElement("div");
        div.textContent = text;
        return div.innerHTML;
      }

      // Add CSS animations
      const style = document.createElement("style");
      style.textContent = `
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes fadeInUp {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideIn {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
          from { transform: translateX(0); opacity: 1; }
          to { transform: translateX(100%); opacity: 0; }
        }
      `;
      document.head.appendChild(style);
    </script>
  </body>
</html>
