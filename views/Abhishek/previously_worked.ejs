<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Work History - Dashboard</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: #f8f9fa;
        color: #333;
      }

      .main-content {
        margin-left: 260px;
        padding: 30px;
        min-height: 100vh;
      }

      .page-header {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        border-left: 4px solid #2563eb;
      }

      .page-title {
        font-size: 28px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
      }

      .page-subtitle {
        color: #666;
        font-size: 16px;
      }

      .content-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 30px;
        margin-bottom: 20px;
      }

      .search-section {
        margin-bottom: 30px;
      }

      .search-bar {
        display: flex;
        gap: 10px;
        max-width: 500px;
      }

      .search-input {
        flex: 1;
        padding: 12px 15px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 14px;
      }

      .search-input:focus {
        outline: none;
        border-color: #2563eb;
      }

      .search-btn {
        padding: 12px 16px;
        background: #2563eb;
        border: none;
        border-radius: 8px;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .search-btn:hover {
        background: #5a6fd8;
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      .stat-number {
        font-size: 32px;
        font-weight: 600;
        color: #2563eb;
        margin-bottom: 5px;
      }

      .stat-label {
        color: #666;
        font-size: 14px;
      }

      .freelancer-card {
        border: 2px solid #e1e5e9;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        transition: all 0.3s ease;
      }

      .freelancer-card:hover {
        border-color: #2563eb;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .card-header {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 15px;
      }

      .profile-img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #2563eb;
      }

      .freelancer-info {
        flex: 1;
      }

      .freelancer-name {
        font-size: 18px;
        font-weight: 600;
        color: #333;
        text-decoration: none;
        margin-bottom: 5px;
        display: block;
      }

      .freelancer-name:hover {
        color: #2563eb;
      }

      .rating {
        display: flex;
        align-items: center;
        gap: 5px;
        color: #ffc107;
      }

      .rating span {
        color: #666;
        font-size: 14px;
      }

      .project-info {
        margin-bottom: 15px;
      }

      .info-label {
        color: #666;
        font-size: 13px;
        margin-bottom: 3px;
      }

      .project-name {
        font-weight: 500;
        color: #333;
      }

      .card-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
      }

      .completion-date {
        display: flex;
        align-items: center;
        gap: 5px;
        color: #666;
        font-size: 13px;
      }

      .action-buttons {
        display: flex;
        gap: 8px;
      }

      .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 13px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
      }

      .btn-primary {
        background: linear-gradient(45deg, #2563eb, #1e40af);
        color: white;
      }

      .btn-outline {
        background: transparent;
        border: 1px solid #2563eb;
        color: #2563eb;
      }

      .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
      }

      .completion-badge {
        background: #d4edda;
        color: #28a745;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
      }

      .no-freelancers {
        text-align: center;
        padding: 50px;
        color: #666;
      }

      .no-freelancers i {
        font-size: 48px;
        color: #ddd;
        margin-bottom: 20px;
      }

      #loadingIndicator {
        display: block;
      }
    </style>
  </head>
  <body>
    <%- include('partials/sidebar', { user: user, activePage:
    'previously_worked' }) %>

    <div class="main-content">
      <div class="page-header">
        <h1 class="page-title">Work History</h1>
        <p class="page-subtitle">
          View freelancers who have previously worked on your projects
        </p>
      </div>

      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-number" id="completedProjects">0</div>
          <div class="stat-label">Completed Projects</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">4.8</div>
          <div class="stat-label">Average Rating</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">15</div>
          <div class="stat-label">Days Average</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">98%</div>
          <div class="stat-label">Success Rate</div>
        </div>
      </div>

      <div class="content-card">
        <div class="search-section">
          <div class="search-bar">
            <input
              type="text"
              class="search-input"
              placeholder="Search freelancers, projects..."
              id="searchInput"
            />
            <button class="search-btn">
              <i class="fas fa-search"></i>
            </button>
          </div>
        </div>

        <div id="freelancersContainer">
          <!-- Content will be loaded dynamically -->
        </div>

        <div id="loadingIndicator" style="text-align: center; padding: 50px;">
          <i class="fas fa-spinner fa-spin" style="font-size: 48px; color: #2563eb;"></i>
          <p style="margin-top: 20px; color: #666;">Loading previous work...</p>
        </div>
      </div>
    </div>

    <script>
      let freelancersData = [];

      document.addEventListener("DOMContentLoaded", () => {
        loadFreelancersData();
        setupSearchFunctionality();
      });

      function setupSearchFunctionality() {
        const searchInput = document.getElementById("searchInput");
        if (searchInput) {
          searchInput.addEventListener("input", filterFreelancers);
        }
      }

      async function loadFreelancersData() {
        try {
          const response = await fetch('/employerD/previously_worked/api/data');
          const data = await response.json();
          
          if (data.success) {
            freelancersData = data.freelancers;
            updateStatsGrid(data.freelancers.length);
            renderFreelancers(data.freelancers);
            hideLoadingIndicator();
            // Re-setup search functionality after content is rendered
            setupSearchFunctionality();
          } else {
            throw new Error(data.message || 'Failed to fetch data');
          }
        } catch (error) {
          console.error('Error fetching freelancers data:', error);
          showErrorMessage('Failed to load previous work data. Please try again later.');
          hideLoadingIndicator();
        }
      }

      function updateStatsGrid(count) {
        document.getElementById('completedProjects').textContent = count;
      }

      function hideLoadingIndicator() {
        const loadingIndicator = document.getElementById('loadingIndicator');
        loadingIndicator.style.display = 'none';
      }

      function showErrorMessage(message) {
        const container = document.getElementById('freelancersContainer');
        container.innerHTML = `
          <div class="no-freelancers">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Error Loading Data</h3>
            <p>${message}</p>
          </div>
        `;
      }

      function renderFreelancers(freelancers) {
        const container = document.getElementById('freelancersContainer');
        
        if (freelancers.length === 0) {
          container.innerHTML = `
            <div class="no-freelancers">
              <i class="fas fa-history"></i>
              <h3>No Previous Work</h3>
              <p>No freelancers have previously worked on your projects.</p>
            </div>
          `;
          return;
        }

        const freelancerCards = freelancers.map(freelancerData => {
          const daysSinceCompletion = Math.floor((new Date() - new Date(freelancerData.completionDate)) / (1000 * 60 * 60 * 24));
          const rating = freelancerData.freelancer.rating;
          const starsHtml = Array.from({length: 5}, (_, i) => 
            `<i class="fas fa-star ${i < Math.floor(rating) ? '' : 'far'}"></i>`
          ).join('');

          return `
            <div
              class="freelancer-card"
              data-rating="${rating}"
              data-name="${freelancerData.freelancer.name.toLowerCase()}"
              data-project="${freelancerData.projectName.toLowerCase()}"
            >
              <div class="card-header">
                <img
                  src="${freelancerData.freelancer.picture}"
                  alt="Profile"
                  class="profile-img"
                />

                <div class="freelancer-info">
                  <a
                    href="/profile/${freelancerData.freelancer.id}"
                    class="freelancer-name"
                  >
                    ${freelancerData.freelancer.name}
                  </a>
                  <div class="rating">
                    ${starsHtml}
                    <span>${rating.toFixed(1)}</span>
                  </div>
                </div>

                <span class="completion-badge">Completed</span>
              </div>

              <div class="card-body">
                <div class="project-info">
                  <p class="info-label">Worked on:</p>
                  <p class="project-name">${freelancerData.projectName}</p>
                </div>
              </div>

              <div class="card-footer">
                <div class="completion-date">
                  <i class="fas fa-calendar-check"></i>
                  <span>Completed ${daysSinceCompletion} days ago</span>
                </div>

                <div class="action-buttons">
                  <a
                    href="/chat/${freelancerData.userId}"
                    class="btn btn-primary"
                  >
                    <i class="fas fa-comment"></i> Chat
                  </a>
                  <a
                    href="/profile/${freelancerData.freelancer.id}"
                    class="btn btn-outline"
                  >
                    <i class="fas fa-user"></i> Profile
                  </a>
                </div>
              </div>
            </div>
          `;
        }).join('');

        container.innerHTML = freelancerCards;
      }

      function filterFreelancers() {
        const searchInput = document.getElementById("searchInput");
        if (!searchInput) return;
        
        const searchTerm = searchInput.value.toLowerCase().trim();
        const freelancerCards = document.querySelectorAll(".freelancer-card");

        freelancerCards.forEach((card) => {
          const freelancerName = card.getAttribute("data-name") || "";
          const projectName = card.getAttribute("data-project") || "";

          if (
            searchTerm === "" ||
            freelancerName.includes(searchTerm) ||
            projectName.includes(searchTerm)
          ) {
            card.style.display = "block";
          } else {
            card.style.display = "none";
          }
        });
      }
    </script>
  </body>
</html>
