<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Transaction History - Dashboard</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: #f8f9fa;
        color: #333;
      }

      .main-content {
        margin-left: 260px;
        padding: 30px;
        min-height: 100vh;
      }

      .page-header {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        border-left: 4px solid #2563eb;
      }

      .page-title {
        font-size: 28px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
      }

      .page-subtitle {
        color: #666;
        font-size: 16px;
      }

      .content-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 30px;
        margin-bottom: 20px;
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      .stat-number {
        font-size: 32px;
        font-weight: 600;
        color: #2563eb;
        margin-bottom: 5px;
      }

      .stat-label {
        color: #666;
        font-size: 14px;
      }

      .filter-section {
        margin-bottom: 30px;
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
        align-items: center;
      }

      .filter-btn {
        padding: 8px 16px;
        border: 2px solid #e1e5e9;
        background: white;
        border-radius: 20px;
        font-size: 13px;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .filter-btn.active,
      .filter-btn:hover {
        background: #2563eb;
        border-color: #2563eb;
        color: white;
      }

      .transactions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 20px;
      }

      .transaction-card {
        border: 2px solid #e1e5e9;
        border-radius: 12px;
        padding: 20px;
        transition: all 0.3s ease;
        background: white;
      }

      .transaction-card:hover {
        border-color: #2563eb;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .card-header {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 15px;
      }

      .freelancer-info {
        display: flex;
        align-items: center;
        gap: 12px;
        flex: 1;
      }

      .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #2563eb;
      }

      .freelancer-name {
        font-weight: 600;
        color: #333;
      }

      .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 11px;
        font-weight: 500;
        text-transform: uppercase;
      }

      .status-completed {
        background: #d4edda;
        color: #28a745;
      }

      .status-in-progress {
        background: #fff3cd;
        color: #f39c12;
      }

      .status-pending {
        background: #f8d7da;
        color: #dc3545;
      }

      .card-body {
        margin-bottom: 15px;
      }

      .project-title {
        font-size: 16px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
      }

      .amount {
        font-size: 20px;
        font-weight: 700;
        color: #2563eb;
        margin-bottom: 8px;
      }

      .date {
        color: #666;
        font-size: 13px;
        display: flex;
        align-items: center;
        gap: 5px;
      }

      .card-footer {
        display: flex;
        gap: 10px;
      }

      .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 13px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        text-align: center;
      }

      .btn-outline {
        background: transparent;
        border: 1px solid #2563eb;
        color: #2563eb;
      }

      .btn-outline:hover {
        background: #2563eb;
        color: white;
        transform: translateY(-1px);
      }

      .btn-primary {
        background: #2563eb;
        color: white;
        border: 1px solid #2563eb;
      }

      .btn-primary:hover {
        background: #1e40af;
        border-color: #1e40af;
        transform: translateY(-1px);
      }

      .btn-primary:disabled {
        background: #6b7280;
        border-color: #6b7280;
        cursor: not-allowed;
        transform: none;
      }

      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 1000;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
      }

      .notification.show {
        opacity: 1;
        transform: translateX(0);
      }

      .notification.success {
        background: #10b981;
      }

      .notification.error {
        background: #ef4444;
      }

      .notification.info {
        background: #3b82f6;
      }

      .loading {
        opacity: 0.6;
        pointer-events: none;
      }

      .no-transactions {
        text-align: center;
        padding: 50px;
        color: #666;
      }

      .no-transactions i {
        font-size: 48px;
        color: #ddd;
        margin-bottom: 20px;
      }

      .transaction-meta {
        display: flex;
        gap: 15px;
        margin-top: 10px;
        color: #666;
        font-size: 12px;
      }

      .transaction-meta span {
        display: flex;
        align-items: center;
        gap: 4px;
      }
    </style>
  </head>
  <body>
    <%- include('partials/sidebar', { user: user, activePage:
    'transaction_history' }) %>

    <div class="main-content">
      <div class="page-header">
        <h1 class="page-title">Transaction History</h1>
        <p class="page-subtitle">
          Track your payments and project transactions
        </p>
      </div>

      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-number">
            <%= transactions ? transactions.length : 0 %>
          </div>
          <div class="stat-label">Total Transactions</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            ₹<%= transactions ? transactions.reduce((sum, t) => sum + t.amount,
            0).toLocaleString() : 0 %>
          </div>
          <div class="stat-label">Total Spent</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            <%= transactions ? transactions.filter(t => t.status ===
            'completed').length : 0 %>
          </div>
          <div class="stat-label">Completed</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            <%= transactions ? transactions.filter(t => t.status ===
            'in-progress').length : 0 %>
          </div>
          <div class="stat-label">In Progress</div>
        </div>
      </div>

      <div class="content-card">
        <div class="filter-section">
          <span style="font-weight: 500; color: #333">Filter by status:</span>
          <button class="filter-btn active" onclick="filterTransactions('all')">
            All
          </button>
          <button class="filter-btn" onclick="filterTransactions('finished')">
            Completed
          </button>
          <button
            class="filter-btn"
            onclick="filterTransactions('in-progress')"
          >
            In Progress
          </button>
          <button class="filter-btn" onclick="filterTransactions('pending')">
            Pending
          </button>
        </div>

        <div class="transactions-grid" id="transactions-container">
          <% if (transactions && transactions.length > 0) { %> <%
          transactions.forEach(transaction => { %>
          <div class="transaction-card" data-status="<%= transaction.status %>">
            <div class="card-header">
              <div class="freelancer-info">
                <img
                  src="<%= transaction.freelancer.picture %>"
                  alt="<%= transaction.freelancer.name %>"
                  class="avatar"
                />
                <div class="freelancer-name">
                  <%= transaction.freelancer.name %>
                </div>
              </div>
              <span class="status-badge status-<%= transaction.status %>"
                ><%= transaction.status %></span
              >
            </div>

            <div class="card-body">
              <div class="project-title"><%= transaction.projectTitle %></div>
              <div class="amount">
                ₹<%= transaction.amount.toLocaleString() %>
              </div>
              <div class="date">
                <i class="fas fa-calendar"></i>
                Started <%= new
                Date(transaction.startDate).toLocaleDateString('en-US', { month:
                'short', day: '2-digit', year: 'numeric' }) %>
              </div>

              <div class="transaction-meta">
                <span><i class="fas fa-clock"></i> Project Duration</span>
                <span
                  ><i class="fas fa-user"></i> <%= transaction.freelancer.name
                  %></span
                >
              </div>
            </div>

            <div class="card-footer">
              <button
                class="btn btn-outline view-details-btn"
                onclick="viewTransactionDetails('<%= transaction.jobId %>')"
              >
                <i class="fas fa-eye"></i> View Details
              </button>
              <% if (transaction.status === 'in-progress' && transaction.milestoneId) { %>
              <button
                class="btn btn-primary pay-milestone-btn"
                onclick="payMilestone('<%= transaction.jobId %>', '<%= transaction.milestoneId %>')"
                data-job-id="<%= transaction.jobId %>"
                data-milestone-id="<%= transaction.milestoneId %>"
              >
                <i class="fas fa-credit-card"></i> Pay Milestone
              </button>
              <% } %>
            </div>
          </div>
          <% }); %> <% } else { %>
          <div class="no-transactions" style="grid-column: 1 / -1">
            <i class="fas fa-receipt"></i>
            <h3>No Transactions Yet</h3>
            <p>
              When you hire freelancers, your transaction history will appear
              here.
            </p>
          </div>
          <% } %>
        </div>
      </div>
    </div>

    <script>
      // Filter functionality
      function filterTransactions(status) {
        const cards = document.querySelectorAll(".transaction-card");
        const buttons = document.querySelectorAll(".filter-btn");

        // Update active button
        buttons.forEach((btn) => btn.classList.remove("active"));
        event.target.classList.add("active");

        // Filter cards
        cards.forEach((card) => {
          if (status === "all" || card.dataset.status === status) {
            card.style.display = "block";
          } else {
            card.style.display = "none";
          }
        });
      }

      // Notification system
      function showNotification(message, type = 'info') {
        // Remove existing notifications
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(n => n.remove());

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
          <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
          <span>${message}</span>
        `;
        
        document.body.appendChild(notification);
        
        // Show notification
        setTimeout(() => notification.classList.add('show'), 100);
        
        // Hide after 4 seconds
        setTimeout(() => {
          notification.classList.remove('show');
          setTimeout(() => notification.remove(), 300);
        }, 4000);
      }

      // AJAX: View transaction details
      async function viewTransactionDetails(jobId) {
        try {
          showNotification('Loading transaction details...', 'info');
          
          const response = await fetch(`/employerD/transaction_history/details/${jobId}`, {
            method: 'GET',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            const data = await response.json();
            displayTransactionModal(data);
          } else {
            throw new Error('Failed to fetch transaction details');
          }
        } catch (error) {
          console.error('Error fetching transaction details:', error);
          showNotification('Error loading transaction details: ' + error.message, 'error');
          // Fallback to traditional navigation
          window.location.href = `/employerD/transaction_history/milestone?jobId=${jobId}`;
        }
      }

      // AJAX: Pay milestone
      async function payMilestone(jobId, milestoneId) {
        const button = event.target.closest('.pay-milestone-btn');
        const originalText = button.innerHTML;
        
        try {
          // Disable button and show loading
          button.disabled = true;
          button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
          
          const response = await fetch(`/employerD/milestone/${jobId}/${milestoneId}/pay`, {
            method: 'POST',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'Content-Type': 'application/json'
            }
          });

          const data = await response.json();

          if (data.success) {
            // Update UI immediately
            const card = button.closest('.transaction-card');
            const statusBadge = card.querySelector('.status-badge');
            statusBadge.textContent = 'completed';
            statusBadge.className = 'status-badge status-completed';
            
            // Update card status
            card.setAttribute('data-status', 'completed');
            
            // Remove pay button
            button.remove();
            
            // Update stats
            updateStats();
            
            showNotification('Milestone payment successful!', 'success');
          } else {
            throw new Error(data.error || 'Payment failed');
          }
        } catch (error) {
          console.error('Error paying milestone:', error);
          showNotification('Payment failed: ' + error.message, 'error');
          
          // Re-enable button
          button.disabled = false;
          button.innerHTML = originalText;
        }
      }

      // Update statistics after payment
      function updateStats() {
        const completedCount = document.querySelectorAll('[data-status="completed"]').length;
        const inProgressCount = document.querySelectorAll('[data-status="in-progress"]').length;
        
        // Update stat cards
        const statCards = document.querySelectorAll('.stat-card .stat-number');
        if (statCards[2]) statCards[2].textContent = completedCount;
        if (statCards[3]) statCards[3].textContent = inProgressCount;
      }

      // Display transaction details in modal
      function displayTransactionModal(data) {
        // Create modal
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
          <div class="modal-content">
            <div class="modal-header">
              <h3>Transaction Details</h3>
              <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div class="modal-body">
              <div class="detail-grid">
                <div class="detail-item">
                  <label>Project:</label>
                  <span>${data.projectTitle}</span>
                </div>
                <div class="detail-item">
                  <label>Freelancer:</label>
                  <span>${data.freelancer.name}</span>
                </div>
                <div class="detail-item">
                  <label>Amount:</label>
                  <span>₹${data.amount.toLocaleString()}</span>
                </div>
                <div class="detail-item">
                  <label>Status:</label>
                  <span class="status-badge status-${data.status}">${data.status}</span>
                </div>
                <div class="detail-item">
                  <label>Start Date:</label>
                  <span>${new Date(data.startDate).toLocaleDateString()}</span>
                </div>
              </div>
            </div>
          </div>
        `;
        
        document.body.appendChild(modal);
        
        // Close modal when clicking overlay
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            modal.remove();
          }
        });
        
        showNotification('Transaction details loaded', 'success');
      }

      // Add modal styles
      const modalStyles = document.createElement('style');
      modalStyles.textContent = `
        .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          z-index: 1001;
          display: flex;
          align-items: center;
          justify-content: center;
          animation: fadeIn 0.3s ease;
        }
        
        .modal-content {
          background: white;
          border-radius: 12px;
          max-width: 500px;
          width: 90%;
          max-height: 80vh;
          overflow-y: auto;
        }
        
        .modal-header {
          padding: 20px;
          border-bottom: 1px solid #e1e5e9;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        
        .modal-close {
          background: none;
          border: none;
          font-size: 18px;
          cursor: pointer;
          color: #666;
        }
        
        .modal-body {
          padding: 20px;
        }
        
        .detail-grid {
          display: grid;
          gap: 15px;
        }
        
        .detail-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 10px 0;
          border-bottom: 1px solid #f1f5f9;
        }
        
        .detail-item label {
          font-weight: 600;
          color: #333;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
      `;
      document.head.appendChild(modalStyles);
    </script>
  </body>
</html>
