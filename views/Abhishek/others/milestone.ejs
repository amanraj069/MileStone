<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Payments & Milestones</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <link rel="stylesheet" href="/css/EmployerD/milestone.css" />
  </head>
  <body>
    <div class="dashboard-wrapper">
      <%- include('../partials/sidebar', { user: user, activePage:
      'transaction_history' }) %>

      <div class="main-content">
        <div class="page-header">
          <h1 class="page-title">
            <i class="fas fa-tasks"></i> Payments & Milestones
          </h1>
          <p class="page-subtitle">
            Track project progress and manage milestone payments
          </p>
        </div>

        <% if (jobs.length === 0) { %>
        <div class="empty-state">
          <i class="fas fa-briefcase"></i>
          <h3>No Jobs Found</h3>
          <p>You don't have any active jobs with milestones yet.</p>
        </div>
        <% } else { %> <% jobs.forEach(job => { %>
        <div class="content-card">
          <div class="job-section">
            <h2 class="job-title"><%= job.title %></h2>
            <p class="job-info">
              <strong>Freelancer:</strong> <%= job.freelancer.name %> (<%=
              job.freelancer.status === 'working' ? 'Currently Working' :
              'Finished' %>)
            </p>
            <div class="progress-card">
              <div class="progress-section">
                <div class="progress-header">
                  <h3 class="progress-title">Project Completion</h3>
                  <span class="progress-percentage"
                    ><%= job.progress.completionPercentage %>%</span
                  >
                </div>
                <div class="progress-bar-container">
                  <div
                    class="progress-bar"
                    style="width: <%= job.progress.completionPercentage %>%"
                  ></div>
                </div>
              </div>
              <div class="progress-section">
                <div class="progress-header">
                  <h3 class="progress-title">Payment Progress</h3>
                  <span class="progress-percentage"
                    >₹<%= job.progress.payment.paid.toLocaleString() %> of ₹<%=
                    job.progress.payment.total.toLocaleString() %> (<%=
                    job.progress.payment.percentage %>%)</span
                  >
                </div>
                <div class="progress-bar-container">
                  <div
                    class="progress-bar"
                    style="width: <%= job.progress.payment.percentage %>%"
                  ></div>
                </div>
              </div>
            </div>

            <div class="milestones-grid">
              <% job.milestones.forEach(milestone => { %> <% const isRequested =
              milestone.requested === true || milestone.requested === 'true'; %>
              <div class="milestone-card">
                <div class="milestone-header">
                  <h4 class="milestone-title">
                    Milestone #<%= milestone.serialNo %>
                  </h4>
                  <span
                    class="milestone-status <%= milestone.status === 'paid' ? 'completed' : isRequested ? 'in-progress' : 'pending' %>"
                  >
                    <%= milestone.status === 'paid' ? 'Completed' : isRequested
                    ? 'Requested' : 'Pending' %>
                  </span>
                </div>
                <p class="milestone-description">
                  <%= milestone.description %>
                </p>

                <!-- Sub-tasks Section -->
                <% if (milestone.subTasks && milestone.subTasks.length > 0) { %>
                <div class="subtasks-section">
                  <div class="subtasks-header">
                    <span class="subtasks-title">Sub-tasks Progress</span>
                    <span class="subtasks-progress">
                      <%= milestone.subTasks.filter(st => st.status === 'completed').length %>/<%= milestone.subTasks.length %>
                    </span>
                  </div>
                  <div class="subtasks-list">
                    <% milestone.subTasks.forEach(subTask => { %>
                    <div class="subtask-item <%= subTask.status %>">
                      <div class="subtask-status-icon">
                        <% if (subTask.status === 'completed') { %>
                          <i class="fas fa-check"></i>
                        <% } else if (subTask.status === 'in-progress') { %>
                          <i class="fas fa-clock"></i>
                        <% } else { %>
                          <i class="far fa-circle"></i>
                        <% } %>
                      </div>
                      <span class="subtask-description"><%= subTask.description %></span>
                      <% if (subTask.status === 'completed' && subTask.completedDate) { %>
                        <span class="subtask-date">
                          <i class="fas fa-calendar-check"></i>
                          <%= new Date(subTask.completedDate).toLocaleDateString() %>
                        </span>
                      <% } %>
                    </div>
                    <% }); %>
                  </div>
                  <div class="subtasks-progress-bar">
                    <div class="progress-bar" style="width: <%= milestone.completionPercentage || 0 %>%"></div>
                  </div>
                </div>
                <% } %>

                <div class="milestone-details">
                  <div class="milestone-detail">
                    <span class="detail-label">Amount</span>
                    <span class="detail-value"
                      >₹<%= milestone.amount.toLocaleString() %></span
                    >
                  </div>
                  <div class="milestone-detail">
                    <span class="detail-label">Deadline</span>
                    <span class="detail-value"><%= milestone.deadline %></span>
                  </div>
                </div>
                <% if (milestone.status === 'paid') { %>
                <button class="payment-button" disabled>
                  <i class="fas fa-check"></i> Paid
                </button>
                <% } else { %>
                <button
                  class="payment-button"
                  data-job-id="<%= job.jobId %>"
                  data-milestone-id="<%= milestone.milestoneId %>"
                  data-description="<%= milestone.description %>"
                  data-amount="<%= milestone.amount %>"
                >
                  <i class="fas fa-credit-card"></i> Pay Now
                </button>
                <% } %>
              </div>
              <% }); %>
            </div>
          </div>
        </div>
        <% }); %> <% } %>
      </div>
    </div>

    <!-- Payment Modal -->
    <div
      id="paymentModal"
      style="
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        align-items: center;
        justify-content: center;
      "
    >
      <div
        style="
          background: white;
          padding: 30px;
          border-radius: 12px;
          width: 90%;
          max-width: 500px;
          position: relative;
        "
      >
        <button 
          id="closePaymentModal" 
          style="
            position: absolute;
            top: 15px;
            right: 15px;
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #64748b;
            padding: 5px;
          "
        >
          ×
        </button>
        <h3 style="margin-bottom: 20px; color: #1e293b">Confirm Payment</h3>
        <p>
          <strong>Description:</strong> <span id="paymentDescription"></span>
        </p>
        <p><strong>Amount:</strong> ₹<span id="paymentAmount"></span></p>
        <div style="margin: 20px 0">
          <label
            for="paymentMethod"
            style="display: block; margin-bottom: 8px; font-weight: 500"
            >Payment Method</label
          >
          <select
            id="paymentMethod"
            required
            style="
              width: 100%;
              padding: 12px;
              border: 2px solid #e1e5e9;
              border-radius: 8px;
            "
          >
            <option value="card">Credit/Debit Card</option>
            <option value="bank">Bank Transfer</option>
            <option value="upi">UPI</option>
          </select>
        </div>
        <div
          style="
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 30px;
          "
        >
          <button type="button" class="btn btn-secondary" id="cancelPaymentBtn">
            Cancel
          </button>
          <button type="button" class="btn btn-primary" id="confirmPaymentBtn">
            Verify and Pay
          </button>
        </div>
      </div>
    </div>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const paymentModal = document.getElementById("paymentModal");
        const closePaymentModal = document.getElementById("closePaymentModal");
        const cancelPaymentBtn = document.getElementById("cancelPaymentBtn");
        const confirmPaymentBtn = document.getElementById("confirmPaymentBtn");
        const paymentDescription =
          document.getElementById("paymentDescription");
        const paymentAmount = document.getElementById("paymentAmount");

        document
          .querySelectorAll(".payment-button:not(:disabled)")
          .forEach((button) => {
            button.addEventListener("click", () => {
              const jobId = button.dataset.jobId;
              const milestoneId = button.dataset.milestoneId;
              const description = button.dataset.description;
              const amount = button.dataset.amount;

              paymentDescription.textContent = description;
              paymentAmount.textContent = Number(amount).toLocaleString();
              confirmPaymentBtn.dataset.jobId = jobId;
              confirmPaymentBtn.dataset.milestoneId = milestoneId;
              paymentModal.style.display = "flex";
            });
          });

        const closePaymentModalFn = () => {
          paymentModal.style.display = "none";
          delete confirmPaymentBtn.dataset.jobId;
          delete confirmPaymentBtn.dataset.milestoneId;
        };

        closePaymentModal.addEventListener("click", closePaymentModalFn);
        cancelPaymentBtn.addEventListener("click", closePaymentModalFn);

        confirmPaymentBtn.addEventListener("click", async () => {
          const jobId = confirmPaymentBtn.dataset.jobId;
          const milestoneId = confirmPaymentBtn.dataset.milestoneId;

          try {
            const response = await fetch(
              `/employerD/milestone/${jobId}/${milestoneId}/pay`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
              }
            );

            if (!response.ok) {
              throw new Error("Failed to update milestone status");
            }

            const data = await response.json();
            if (data.success) {
              const milestoneCard = document
                .querySelector(`.payment-button[data-milestone-id="${milestoneId}"]`)
                .closest(".milestone-card");
              milestoneCard.classList.remove("not-paid");
              milestoneCard.classList.remove("requested");
              milestoneCard.classList.add("paid");
              const paymentButton = milestoneCard.querySelector(".payment-button");
              paymentButton.innerHTML = '<i class="fas fa-check"></i> Paid';
              paymentButton.disabled = true;
              paymentModal.style.display = "none";

              // Update payment progress
              const jobSection = milestoneCard.closest(".job-section");
              const progressAmountElement = jobSection.querySelector(".progress-section:last-child .progress-percentage");
              const currentText = progressAmountElement.textContent;
              const paidMatch = currentText.match(/₹([\d,]+)/);
              const totalMatch = currentText.match(/of ₹([\d,]+)/);
              
              if (paidMatch && totalMatch) {
                const currentPaidAmount = parseFloat(paidMatch[1].replace(/,/g, ""));
                const newPaidAmount = currentPaidAmount + parseFloat(paymentAmount.textContent.replace(/,/g, ""));
                const totalAmount = parseFloat(totalMatch[1].replace(/,/g, ""));
                const percentage = totalAmount > 0 ? Math.round((newPaidAmount / totalAmount) * 100) : 0;
                
                progressAmountElement.textContent = `₹${newPaidAmount.toLocaleString()} of ₹${totalAmount.toLocaleString()} (${percentage}%)`;
                const paymentProgressBar = jobSection.querySelector(".progress-section:last-child .progress-bar");
                paymentProgressBar.style.width = `${percentage}%`;
              }

              // Update completion progress
              const completedCount = jobSection.querySelectorAll(".milestone-card.paid").length;
              const totalCount = jobSection.querySelectorAll(".milestone-card").length;
              const completionPercentage = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;
              
              const completionPercentageElement = jobSection.querySelector(".progress-section:first-child .progress-percentage");
              completionPercentageElement.textContent = `${completionPercentage}%`;
              const completionProgressBar = jobSection.querySelector(".progress-section:first-child .progress-bar");
              completionProgressBar.style.width = `${completionPercentage}%`;
            }
          } catch (error) {
            console.error("Error paying milestone:", error.message);
            alert("Failed to process payment. Please try again.");
          }
        });

        // Debug classes applied to milestone cards
        document.querySelectorAll(".milestone-card").forEach((card) => {
          console.log(`Milestone card classes: ${card.className}`);
        });
      });
    </script>
  </body>
</html>
