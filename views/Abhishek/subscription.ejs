<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Subscription - Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: #333;
    }

    .main-content {
      margin-left: 260px;
      padding: 30px;
      min-height: 100vh;
    }

    .page-header {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      border-left: 4px solid #2563eb;
    }

    .page-title {
      font-size: 28px;
      font-weight: 600;
      color: #333;
      margin-bottom: 8px;
    }

    .page-subtitle {
      color: #666;
      font-size: 16px;
    }

    .content-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      padding: 30px;
      margin-bottom: 20px;
    }

    .current-plan {
      background: linear-gradient(45deg, #2563eb, #1e40af);
      color: white;
      border-radius: 12px;
      padding: 25px;
      margin-bottom: 30px;
      text-align: center;
    }

    .current-plan h3 {
      font-size: 24px;
      margin-bottom: 10px;
    }

    .current-plan p {
      font-size: 16px;
      opacity: 0.9;
    }

    .current-plan-badge {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      background: rgba(255,255,255,0.2);
      padding: 8px 16px;
      border-radius: 20px;
      margin-top: 15px;
      font-size: 14px;
      font-weight: 500;
    }

    .plans-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 30px;
      margin-top: 30px;
    }

    .plan-card {
      background: white;
      border: 2px solid #e1e5e9;
      border-radius: 12px;
      padding: 30px;
      text-align: center;
      transition: all 0.3s ease;
      position: relative;
    }

    .plan-card:hover {
      border-color: #2563eb;
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .plan-card.premium {
      border-color: #2563eb;
      background: linear-gradient(135deg, #f8f9ff 0%, #ffffff 100%);
    }

    .plan-card.premium::before {
      content: 'POPULAR';
      position: absolute;
      top: -10px;
      left: 50%;
      transform: translateX(-50%);
      background: #2563eb;
      color: white;
      padding: 5px 15px;
      border-radius: 20px;
      font-size: 11px;
      font-weight: 600;
    }

    .plan-title {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 10px;
      color: #333;
    }

    .plan-price {
      font-size: 32px;
      font-weight: 700;
      color: #2563eb;
      margin-bottom: 20px;
    }

    .plan-price .currency {
      font-size: 18px;
      vertical-align: super;
    }

    .plan-price .period {
      font-size: 16px;
      color: #666;
      font-weight: 400;
    }

    .plan-description {
      color: #666;
      margin-bottom: 25px;
      line-height: 1.5;
    }

    .plan-features {
      list-style: none;
      margin-bottom: 30px;
      text-align: left;
    }

    .plan-features li {
      padding: 8px 0;
      display: flex;
      align-items: center;
      gap: 10px;
      color: #555;
    }

    .plan-features i {
      color: #28a745;
      width: 16px;
    }

    .plan-features .not-included {
      color: #ccc;
    }

    .plan-features .not-included i {
      color: #dc3545;
    }

    .plan-button {
      width: 100%;
      padding: 15px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .plan-button.primary {
      background: linear-gradient(45deg, #2563eb, #1e40af);
      color: white;
    }

    .plan-button.primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .plan-button.current {
      background: #28a745;
      color: white;
      cursor: not-allowed;
    }

    .plan-button.secondary {
      background: transparent;
      border: 2px solid #2563eb;
      color: #2563eb;
    }

    .plan-button.secondary:hover {
      background: #2563eb;
      color: white;
    }

    .billing-info {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin-top: 30px;
    }

    .billing-info h4 {
      margin-bottom: 15px;
      color: #333;
    }

    .billing-info ul {
      list-style: none;
      color: #666;
    }

    .billing-info li {
      padding: 5px 0;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .billing-info i {
      color: #2563eb;
      width: 16px;
    }

    /* Notification styles */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      z-index: 1000;
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .notification.show {
      opacity: 1;
      transform: translateX(0);
    }

    .notification.success {
      background: #28a745;
    }

    .notification.error {
      background: #dc3545;
    }

    .notification.info {
      background: #17a2b8;
    }

    /* Loading states */
    .plan-button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none !important;
    }

    .plan-button.loading {
      position: relative;
      color: transparent;
    }

    .plan-button.loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 16px;
      height: 16px;
      border: 2px solid #ffffff;
      border-radius: 50%;
      border-top-color: transparent;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: translate(-50%, -50%) rotate(0deg); }
      100% { transform: translate(-50%, -50%) rotate(360deg); }
    }
  </style>
</head>
<body>
  <%- include('partials/sidebar', { user: user, activePage: 'subscription' }) %>
  
  <div class="main-content">
    <div class="page-header">
      <h1 class="page-title">Subscription Plans</h1>
      <p class="page-subtitle">Unlock premium features with a plan that suits your business needs</p>
    </div>

    <div class="current-plan">
      <h3><i class="fas fa-crown"></i> Your Current Plan</h3>
      <p><%= user.subscription || 'Basic' %> Plan</p>
      <div class="current-plan-badge">
        <i class="fas fa-check-circle"></i>
        <%= user.subscription === 'Premium' ? 'Premium features unlocked' : 'Basic features available' %>
      </div>
    </div>

    <div class="content-card">
      <h2 style="text-align: center; margin-bottom: 20px; font-size: 24px;">Choose Your Plan</h2>
      
      <div class="plans-grid">
        <div class="plan-card">
          <h3 class="plan-title">Basic</h3>
          <div class="plan-price">
            <span class="currency">₹</span>0<span class="period">/month</span>
          </div>
          <p class="plan-description">Perfect for getting started with basic job posting features</p>
          
          <ul class="plan-features">
            <li><i class="fas fa-check"></i> Post up to 3 jobs per month</li>
            <li><i class="fas fa-check"></i> Basic applicant management</li>
            <li><i class="fas fa-check"></i> Standard support</li>
            <li class="not-included"><i class="fas fa-times"></i> Priority listing</li>
            <li class="not-included"><i class="fas fa-times"></i> Advanced analytics</li>
            <li class="not-included"><i class="fas fa-times"></i> Premium support</li>
          </ul>
          
          <button class="plan-button <%= user.subscription === 'Basic' || !user.subscription ? 'current' : 'secondary' %>" 
                  <%= user.subscription === 'Basic' || !user.subscription ? 'disabled' : '' %>>
            <%= user.subscription === 'Basic' || !user.subscription ? 'Current Plan' : 'Downgrade to Basic' %>
          </button>
        </div>

        <div class="plan-card premium">
          <h3 class="plan-title">Premium</h3>
          <div class="plan-price">
            <span class="currency">₹</span>868<span class="period">/month</span>
          </div>
          <p class="plan-description">Ideal for growing businesses with advanced hiring needs</p>
          
          <ul class="plan-features">
            <li><i class="fas fa-check"></i> Unlimited job postings</li>
            <li><i class="fas fa-check"></i> Advanced applicant filtering</li>
            <li><i class="fas fa-check"></i> Priority job listing</li>
            <li><i class="fas fa-check"></i> Detailed analytics & insights</li>
            <li><i class="fas fa-check"></i> Premium support (24/7)</li>
            <li><i class="fas fa-check"></i> Custom branding options</li>
          </ul>
          
          <button class="plan-button <%= user.subscription === 'Premium' ? 'current' : 'primary' %>" 
                  <%= user.subscription === 'Premium' ? 'disabled' : '' %>
                  onclick="<%= user.subscription === 'Premium' ? '' : 'subscribeToPlan(\"Premium\", this)' %>">
            <%= user.subscription === 'Premium' ? 'Current Plan' : 'Upgrade to Premium' %>
          </button>
        </div>
      </div>

      <div class="billing-info">
        <h4><i class="fas fa-info-circle"></i> Billing Information</h4>
        <ul>
          <li><i class="fas fa-shield-alt"></i> Secure payment processing</li>
          <li><i class="fas fa-sync-alt"></i> Cancel or change plans anytime</li>
          <li><i class="fas fa-receipt"></i> Monthly billing cycles</li>
          <li><i class="fas fa-phone"></i> 24/7 customer support for Premium users</li>
        </ul>
      </div>
    </div>
  </div>

  <script>
    // AJAX function for subscription purchase
    async function subscribeToPlan(planType, buttonElement) {
      if (!planType) {
        showNotification('Invalid plan selection', 'error');
        return;
      }

      try {
        // Show loading state
        buttonElement.disabled = true;
        buttonElement.classList.add('loading');
        const originalText = buttonElement.textContent;
        
        showNotification(`Processing ${planType} subscription...`, 'info');

        const response = await fetch('/employerD/subscription/purchase', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            planType: planType,
            amount: planType === 'Premium' ? 868 : 0
          })
        });

        if (response.ok) {
          const result = await response.json();
          
          if (result.requiresPayment) {
            showNotification('Redirecting to payment page...', 'info');
            // Redirect to payment page for Premium plans
            window.location.href = `/employerD/payment?plan=${planType}&amount=${result.amount}`;
          } else {
            showNotification(`Successfully subscribed to ${planType} plan!`, 'success');
            
            // Update UI to reflect new subscription
            updateSubscriptionUI(planType);
          }
        } else {
          const errorData = await response.json();
          showNotification(errorData.message || `Failed to subscribe to ${planType} plan`, 'error');
        }
      } catch (error) {
        console.error('Subscription error:', error);
        showNotification('Network error during subscription process', 'error');
      } finally {
        // Reset button state
        buttonElement.disabled = false;
        buttonElement.classList.remove('loading');
      }
    }

    // Update UI after successful subscription change
    function updateSubscriptionUI(newPlan) {
      // Update current subscription display
      const currentPlanElement = document.querySelector('.current-plan p');
      if (currentPlanElement) {
        currentPlanElement.textContent = `${newPlan} Plan`;
      }

      const statusElement = document.querySelector('.subscription-status p');
      if (statusElement) {
        statusElement.textContent = newPlan === 'Premium' 
          ? 'Premium features unlocked' 
          : 'Basic features available';
      }

      // Update plan buttons
      const planButtons = document.querySelectorAll('.plan-button');
      planButtons.forEach(button => {
        const planCard = button.closest('.plan-card');
        const isBasicCard = planCard && planCard.classList.contains('basic');
        const isPremiumCard = planCard && planCard.classList.contains('premium');

        if (isBasicCard) {
          if (newPlan === 'Basic' || newPlan === 'Free') {
            button.className = 'plan-button current';
            button.disabled = true;
            button.textContent = 'Current Plan';
          } else {
            button.className = 'plan-button secondary';
            button.disabled = false;
            button.textContent = 'Downgrade to Basic';
          }
        } else if (isPremiumCard) {
          if (newPlan === 'Premium') {
            button.className = 'plan-button current';
            button.disabled = true;
            button.textContent = 'Current Plan';
            button.onclick = null;
          } else {
            button.className = 'plan-button primary';
            button.disabled = false;
            button.textContent = 'Upgrade to Premium';
            button.onclick = () => subscribeToPlan('Premium', button);
          }
        }
      });
    }

    // Notification system
    function showNotification(message, type = 'info') {
      // Remove any existing notifications
      const existingNotification = document.querySelector('.notification');
      if (existingNotification) {
        existingNotification.remove();
      }

      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      const icon = type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : 'info-circle';
      notification.innerHTML = `
        <i class="fas fa-${icon}"></i>
        <span>${message}</span>
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(() => notification.classList.add('show'), 100);
      
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
      }, 4000);
    }

    // Form validation for subscription data
    function validateSubscriptionData(planType) {
      if (!planType || typeof planType !== 'string') {
        showFieldError(null, 'Invalid plan type selected');
        return false;
      }

      const validPlans = ['Basic', 'Premium', 'Free'];
      if (!validPlans.includes(planType)) {
        showFieldError(null, 'Unsupported plan type');
        return false;
      }

      return true;
    }

    function showFieldError(inputElement, message) {
      showNotification(message, 'error');
    }

    // Add confirmation for plan changes
    function confirmSubscriptionChange(planType, buttonElement) {
      const currentPlan = '<%= user.subscription || "Basic" %>';
      
      if (planType === currentPlan) {
        showNotification('You are already subscribed to this plan', 'info');
        return;
      }

      const isDowngrade = currentPlan === 'Premium' && planType === 'Basic';
      const isUpgrade = currentPlan !== 'Premium' && planType === 'Premium';

      let confirmMessage = '';
      if (isUpgrade) {
        confirmMessage = 'Upgrade to Premium plan? You will be redirected to payment.';
      } else if (isDowngrade) {
        confirmMessage = 'Downgrade to Basic plan? You will lose Premium features.';
      } else {
        confirmMessage = `Switch to ${planType} plan?`;
      }

      if (confirm(confirmMessage)) {
        subscribeToPlan(planType, buttonElement);
      }
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      // Add click handlers to plan buttons if they don't have onclick
      const planButtons = document.querySelectorAll('.plan-button:not([disabled])');
      planButtons.forEach(button => {
        if (!button.onclick && !button.disabled) {
          const planCard = button.closest('.plan-card');
          if (planCard && planCard.classList.contains('basic')) {
            button.onclick = () => confirmSubscriptionChange('Basic', button);
          }
        }
      });
    });
  </script>
</body>
</html>