<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Job Applications - Dashboard</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: #f8f9fa;
        color: #333;
      }

      .main-content {
        margin-left: 260px;
        padding: 30px;
        min-height: 100vh;
      }

      .page-header {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        border-left: 4px solid #2563eb;
      }

      .page-title {
        font-size: 28px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
      }

      .page-subtitle {
        color: #666;
        font-size: 16px;
      }

      .content-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 30px;
        margin-bottom: 20px;
      }

      .search-section {
        margin-bottom: 30px;
      }

      .search-bar {
        display: flex;
        gap: 10px;
        max-width: 500px;
      }

      .search-input {
        flex: 1;
        padding: 12px 15px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 14px;
      }

      .search-input:focus {
        outline: none;
        border-color: #2563eb;
      }

      .search-btn {
        padding: 12px 16px;
        background: #2563eb;
        border: none;
        border-radius: 8px;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .search-btn:hover {
        background: #5a6fd8;
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      .stat-number {
        font-size: 32px;
        font-weight: 600;
        color: #2563eb;
        margin-bottom: 5px;
      }

      .stat-label {
        color: #666;
        font-size: 14px;
      }

      .application-card {
        border: 2px solid #e1e5e9;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        transition: all 0.3s ease;
      }

      .application-card:hover {
        border-color: #2563eb;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .application-card:not(.visible) {
        display: none;
      }

      .card-header {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 15px;
      }

      .profile-img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #2563eb;
      }

      .application-info {
        flex: 1;
      }

      .freelancer-name {
        font-size: 18px;
        font-weight: 600;
        color: #333;
        text-decoration: none;
        margin-bottom: 5px;
        display: block;
      }

      .freelancer-name:hover {
        color: #2563eb;
      }

      .job-title {
        color: #666;
        font-size: 14px;
        margin-bottom: 3px;
      }

      .application-date {
        color: #888;
        font-size: 13px;
      }

      .status {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
        text-transform: uppercase;
      }

      .status.pending {
        background: #fff3cd;
        color: #f39c12;
      }

      .status.accepted {
        background: #d4edda;
        color: #28a745;
      }

      .status.rejected {
        background: #f8d7da;
        color: #dc3545;
      }

      .card-body {
        margin-bottom: 15px;
      }

      .cover-message {
        margin-bottom: 15px;
      }

      .info-label {
        color: #666;
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 5px;
      }

      .cover-message p:last-child {
        line-height: 1.5;
        color: #555;
      }

      .resume-link a {
        color: #2563eb;
        text-decoration: none;
        font-weight: 500;
      }

      .resume-link a:hover {
        text-decoration: underline;
      }

      .card-footer {
        display: flex;
        gap: 10px;
      }

      .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 13px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .accept-btn {
        background: #28a745;
        color: white;
      }

      .reject-btn {
        background: #dc3545;
        color: white;
      }

      .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
      }

      .no-applications {
        text-align: center;
        padding: 50px;
        color: #666;
      }

      .no-applications i {
        font-size: 48px;
        color: #ddd;
        margin-bottom: 20px;
      }

      /* Notification styles */
      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 1000;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .notification.show {
        opacity: 1;
        transform: translateX(0);
      }

      .notification.success {
        background: #28a745;
      }

      .notification.error {
        background: #dc3545;
      }

      .notification.info {
        background: #17a2b8;
      }

      /* Loading states */
      .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
      }

      .loading-card {
        opacity: 0.6;
        pointer-events: none;
      }

      /* Form validation styles */
      .form-group {
        margin-bottom: 20px;
        position: relative;
      }

      .form-input {
        width: 100%;
        padding: 12px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
      }

      .form-input:focus {
        outline: none;
        border-color: #2563eb;
      }

      .form-input.error {
        border-color: #dc3545;
      }

      .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: none;
      }

      .error-message.show {
        display: block;
      }

      /* Modal styles for bulk actions */
      .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1001;
        display: none;
        align-items: center;
        justify-content: center;
      }

      .modal-content {
        background: white;
        border-radius: 12px;
        padding: 20px;
        max-width: 500px;
        width: 90%;
        position: relative;
      }

      .modal-close {
        position: absolute;
        top: 15px;
        right: 15px;
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: #666;
      }
    </style>
  </head>
  <body>
    <%- include('partials/sidebar', { user: user, activePage: 'job_applications'
    }) %>

    <div class="main-content">
      <div class="page-header">
        <h1 class="page-title">Job Applications</h1>
        <p class="page-subtitle">
          Review and manage applications for your job listings
        </p>
      </div>

      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-number">
            <%= applications ? applications.length : 0 %>
          </div>
          <div class="stat-label">Total Applications</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            <%= applications ? applications.filter(app => app.status ===
            'Pending').length : 0 %>
          </div>
          <div class="stat-label">Pending Review</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            <%= applications ? applications.filter(app => app.status ===
            'Accepted').length : 0 %>
          </div>
          <div class="stat-label">Accepted</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            <%= applications ? applications.filter(app => app.status ===
            'Rejected').length : 0 %>
          </div>
          <div class="stat-label">Rejected</div>
        </div>
      </div>

      <div class="content-card">
        <div class="search-section">
          <div class="search-bar">
            <input
              type="text"
              id="searchInput"
              class="search-input"
              placeholder="Search applications, freelancers..."
            />
            <button id="searchBtn" class="search-btn">
              <i class="fas fa-search"></i>
            </button>
          </div>
        </div>

        <% if (applications && applications.length > 0) { %> <%
        applications.forEach(application => { %>
        <div
          class="application-card visible"
          data-freelancer="<%= application.freelancerName.toLowerCase() %>"
          data-job="<%= application.jobTitle.toLowerCase() %>"
        >
          <div class="card-header">
            <img
              src="<%= application.freelancerPicture || '/assets/user_default.png' %>"
              alt="Profile"
              class="profile-img"
            />

            <div class="application-info">
              <a
                href="/profile/<%= application.freelancerId %>"
                class="freelancer-name"
              >
                <%= application.freelancerName %>
              </a>
              <div class="job-title">
                Applied for: <%= application.jobTitle %>
              </div>
              <div class="application-date">
                Applied on: <%= new
                Date(application.appliedDate).toLocaleDateString() %>
              </div>
            </div>

            <div class="status <%= application.status.toLowerCase() %>">
              <%= application.status %>
            </div>
          </div>

          <div class="card-body">
            <div class="cover-message">
              <p class="info-label">Cover Message:</p>
              <p>
                <%= application.coverMessage || 'No cover message provided' %>
              </p>
            </div>

            <% if (application.resumeLink) { %>
            <div class="resume-link">
              <p class="info-label">Resume:</p>
              <a href="<%= application.resumeLink %>" target="_blank">
                <i class="fas fa-file-pdf"></i> View Resume
              </a>
            </div>
            <% } %>
          </div>

          <% if (application.status === 'Pending') { %>
          <div class="card-footer">
            <button type="button" class="btn accept-btn" onclick="acceptApplication('<%= application.applicationId %>', this)">
              <i class="fas fa-check"></i> Accept
            </button>
            <button type="button" class="btn reject-btn" onclick="rejectApplication('<%= application.applicationId %>', this)">
              <i class="fas fa-times"></i> Reject
            </button>
          </div>
          <% } %>
        </div>
        <% }) %> <% } else { %>
        <div class="no-applications">
          <i class="fas fa-file-alt"></i>
          <h3>No Applications Yet</h3>
          <p>Applications for your job listings will appear here.</p>
        </div>
        <% } %>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const searchInput = document.getElementById("searchInput");
        const searchBtn = document.getElementById("searchBtn");
        const applicationCards = document.querySelectorAll(".application-card");

        const filterApplications = () => {
          const searchTerm = searchInput.value.toLowerCase().trim();

          applicationCards.forEach((card) => {
            const freelancerName = card.getAttribute("data-freelancer");
            const jobTitle = card.getAttribute("data-job");

            if (
              searchTerm === "" ||
              freelancerName.includes(searchTerm) ||
              jobTitle.includes(searchTerm)
            ) {
              card.classList.add("visible");
            } else {
              card.classList.remove("visible");
            }
          });
        };

        searchBtn.addEventListener("click", filterApplications);
        searchInput.addEventListener("keypress", (e) => {
          if (e.key === "Enter") {
            filterApplications();
          }
        });
        searchInput.addEventListener("input", filterApplications);
      });

      // AJAX functions for accept/reject applications
      async function acceptApplication(applicationId, buttonElement) {
        if (!applicationId) {
          showNotification('Invalid application ID', 'error');
          return;
        }

        const cardElement = buttonElement.closest('.application-card');
        
        try {
          // Disable buttons and show loading state
          const buttons = cardElement.querySelectorAll('.btn');
          buttons.forEach(btn => {
            btn.disabled = true;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
          });
          cardElement.classList.add('loading-card');

          showNotification('Processing application acceptance...', 'info');

          const response = await fetch(`/employerD/job_applications/${applicationId}/accept`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            }
          });

          if (response.ok) {
            showNotification('Application accepted successfully!', 'success');
            
            // Update the card UI
            const statusElement = cardElement.querySelector('.status-pending, .status-accepted, .status-rejected');
            if (statusElement) {
              statusElement.className = 'status status-accepted';
              statusElement.innerHTML = '<i class="fas fa-check-circle"></i> Accepted';
            }
            
            // Remove the buttons since status is no longer pending
            cardElement.querySelector('.card-footer').remove();
            
            // Update stats if they exist
            updateApplicationStats();
          } else {
            const errorData = await response.json();
            showNotification(errorData.message || 'Failed to accept application', 'error');
            
            // Restore button states
            buttons.forEach((btn, index) => {
              btn.disabled = false;
              if (index === 0) {
                btn.innerHTML = '<i class="fas fa-check"></i> Accept';
              } else {
                btn.innerHTML = '<i class="fas fa-times"></i> Reject';
              }
            });
          }
        } catch (error) {
          console.error('Accept application error:', error);
          showNotification('Network error while accepting application', 'error');
          
          // Restore button states on error
          const buttons = cardElement.querySelectorAll('.btn');
          buttons.forEach((btn, index) => {
            btn.disabled = false;
            if (index === 0) {
              btn.innerHTML = '<i class="fas fa-check"></i> Accept';
            } else {
              btn.innerHTML = '<i class="fas fa-times"></i> Reject';
            }
          });
        } finally {
          cardElement.classList.remove('loading-card');
        }
      }

      async function rejectApplication(applicationId, buttonElement) {
        if (!applicationId) {
          showNotification('Invalid application ID', 'error');
          return;
        }

        const cardElement = buttonElement.closest('.application-card');
        
        try {
          // Disable buttons and show loading state
          const buttons = cardElement.querySelectorAll('.btn');
          buttons.forEach(btn => {
            btn.disabled = true;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
          });
          cardElement.classList.add('loading-card');

          showNotification('Processing application rejection...', 'info');

          const response = await fetch(`/employerD/job_applications/${applicationId}/reject`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            }
          });

          if (response.ok) {
            showNotification('Application rejected successfully!', 'success');
            
            // Update the card UI
            const statusElement = cardElement.querySelector('.status-pending, .status-accepted, .status-rejected');
            if (statusElement) {
              statusElement.className = 'status status-rejected';
              statusElement.innerHTML = '<i class="fas fa-times-circle"></i> Rejected';
            }
            
            // Remove the buttons since status is no longer pending
            cardElement.querySelector('.card-footer').remove();
            
            // Update stats if they exist
            updateApplicationStats();
          } else {
            const errorData = await response.json();
            showNotification(errorData.message || 'Failed to reject application', 'error');
            
            // Restore button states
            buttons.forEach((btn, index) => {
              btn.disabled = false;
              if (index === 0) {
                btn.innerHTML = '<i class="fas fa-check"></i> Accept';
              } else {
                btn.innerHTML = '<i class="fas fa-times"></i> Reject';
              }
            });
          }
        } catch (error) {
          console.error('Reject application error:', error);
          showNotification('Network error while rejecting application', 'error');
          
          // Restore button states on error
          const buttons = cardElement.querySelectorAll('.btn');
          buttons.forEach((btn, index) => {
            btn.disabled = false;
            if (index === 0) {
              btn.innerHTML = '<i class="fas fa-check"></i> Accept';
            } else {
              btn.innerHTML = '<i class="fas fa-times"></i> Reject';
            }
          });
        } finally {
          cardElement.classList.remove('loading-card');
        }
      }

      // Notification system
      function showNotification(message, type = 'info') {
        // Remove any existing notifications
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
          existingNotification.remove();
        }

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        
        const icon = type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : 'info-circle';
        notification.innerHTML = `
          <i class="fas fa-${icon}"></i>
          <span>${message}</span>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.add('show'), 100);
        
        setTimeout(() => {
          notification.classList.remove('show');
          setTimeout(() => notification.remove(), 300);
        }, 3000);
      }

      // Update application statistics
      function updateApplicationStats() {
        const pendingCount = document.querySelectorAll('.status-pending').length;
        const acceptedCount = document.querySelectorAll('.status-accepted').length;
        const rejectedCount = document.querySelectorAll('.status-rejected').length;
        
        // Update stat cards if they exist
        const statCards = document.querySelectorAll('.stat-number');
        if (statCards.length >= 3) {
          statCards[0].textContent = pendingCount + acceptedCount + rejectedCount; // Total
          statCards[1].textContent = pendingCount; // Pending
          statCards[2].textContent = acceptedCount; // Accepted
        }
      }

      // Form validation for search
      function validateSearchForm() {
        const searchInput = document.getElementById('searchInput');
        
        if (!searchInput) return true;
        
        const value = searchInput.value.trim();
        
        // Remove previous error states
        searchInput.classList.remove('error');
        const errorMsg = searchInput.parentElement.querySelector('.error-message');
        if (errorMsg) errorMsg.classList.remove('show');
        
        // Validate search input (optional but can add constraints)
        if (value.length > 100) {
          showFieldError(searchInput, 'Search term too long (max 100 characters)');
          return false;
        }
        
        // Check for potentially harmful characters
        const dangerousPattern = /[<>'"&]/;
        if (dangerousPattern.test(value)) {
          showFieldError(searchInput, 'Invalid characters in search term');
          return false;
        }
        
        return true;
      }

      function showFieldError(inputElement, message) {
        inputElement.classList.add('error');
        
        let errorElement = inputElement.parentElement.querySelector('.error-message');
        if (!errorElement) {
          errorElement = document.createElement('div');
          errorElement.className = 'error-message';
          inputElement.parentElement.appendChild(errorElement);
        }
        
        errorElement.textContent = message;
        errorElement.classList.add('show');
        
        // Remove error after user starts typing
        inputElement.addEventListener('input', function clearError() {
          inputElement.classList.remove('error');
          errorElement.classList.remove('show');
          inputElement.removeEventListener('input', clearError);
        }, { once: true });
      }

      // Add validation to search functionality
      document.addEventListener('DOMContentLoaded', function() {
        const searchBtn = document.getElementById('searchBtn');
        const searchInput = document.getElementById('searchInput');
        
        if (searchBtn) {
          searchBtn.addEventListener('click', function(e) {
            if (!validateSearchForm()) {
              e.preventDefault();
              return false;
            }
          });
        }
        
        if (searchInput) {
          searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
              if (!validateSearchForm()) {
                e.preventDefault();
                return false;
              }
            }
          });
        }
      });
    </script>
  </body>
</html>
