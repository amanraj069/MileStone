<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Current Jobs - Dashboard</title>
    <link
      rel="stylesheet"
      href="/fontawesome/css/all.min.css"
    />
    <link rel="stylesheet" href="/css/EmployerD/sidebar.css" />
    <link rel="stylesheet" href="/css/EmployerD/current_jobs.css" />
  </head>
  <body>
    <%- include('partials/sidebar', { user: user, activePage: 'current_jobs' })
    %>

    <div class="main-content">
      <div class="page-header">
        <h1 class="page-title">Current Jobs</h1>
        <p class="page-subtitle">
          Track freelancers currently working on your projects
        </p>
      </div>

      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-number">
            <%= freelancers ? freelancers.length : 0 %>
          </div>
          <div class="stat-label">Active Freelancers</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">3</div>
          <div class="stat-label">Projects in Progress</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">7</div>
          <div class="stat-label">Days Average</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">92%</div>
          <div class="stat-label">Success Rate</div>
        </div>
      </div>

      <div class="content-card">
        <div class="search-section">
          <div class="search-bar">
            <input
              type="text"
              class="search-input"
              placeholder="Search freelancers, skills..."
            />
            <button class="search-btn">
              <i class="fas fa-search"></i>
            </button>
          </div>
        </div>

        <% if (freelancers && freelancers.length > 0) { %> <%
        freelancers.forEach(freelancerData => { %>
        <div class="freelancer-card">
          <div class="card-header">
            <img
              src="<%= freelancerData.freelancer.picture %>"
              alt="Profile"
              class="profile-img"
            />

            <div class="freelancer-info">
              <a
                href="/employerD/view_profile/<%= freelancerData.freelancer.id %>"
                class="freelancer-name"
              >
                <%= freelancerData.freelancer.name %>
              </a>
              <div class="rating">
                <% for (let i = 0; i < 5; i++) { %>
                <i
                  class="fas fa-star <%= i < Math.floor(freelancerData.freelancer.rating) ? '' : 'far' %>"
                ></i>
                <% } %>
                <span><%= freelancerData.freelancer.rating.toFixed(1) %></span>
              </div>
            </div>

            <button
              class="btn btn-danger"
              data-job-id="<%= freelancerData.jobId %>"
              data-freelancer-id="<%= freelancerData.freelancer.id %>"
            >
              Raise Complaint
            </button>
          </div>

          <div class="card-body">
            <div class="skills">
              <% freelancerData.skills.slice(0, 3).forEach(skill => { %>
              <span class="skill-tag"><%= skill %></span>
              <% }) %>
            </div>

            <div class="project-info">
              <p class="info-label">Working on:</p>
              <p class="project-name"><%= freelancerData.projectName %></p>
            </div>
          </div>

          <div class="card-footer">
            <div class="since-date">
              <i class="fas fa-calendar"></i>
              <span
                >Since <%= Math.floor((new Date() - new
                Date(freelancerData.startDate)) / (1000 * 60 * 60 * 24)) %>
                days</span
              >
            </div>

            <div class="action-buttons">
              <a
                href="/chat/<%= freelancerData.freelancer.userId || freelancerData.freelancer.id %>"
                class="btn btn-primary"
              >
                <i class="fas fa-comment"></i> Chat
              </a>
              <a
                href="/jobs/<%= freelancerData.jobId %>"
                class="btn btn-outline"
              >
                <i class="fas fa-eye"></i> See More
              </a>
            </div>
          </div>
        </div>
        <% }) %> <% } else { %>
        <div class="no-freelancers">
          <i class="fas fa-users"></i>
          <h3>No Active Freelancers</h3>
          <p>No freelancers are currently working on your projects.</p>
        </div>
        <% } %>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Get DOM elements
        const searchInput = document.querySelector('.search-input');
        const searchBtn = document.querySelector('.search-btn');
        const freelancerCards = document.querySelectorAll('.freelancer-card');
        
        // Search functionality
        function filterFreelancers() {
          const searchTerm = searchInput.value.toLowerCase().trim();
          let visibleCount = 0;
          
          freelancerCards.forEach(card => {
            const freelancerName = card.querySelector('.freelancer-name').textContent.toLowerCase();
            const skills = Array.from(card.querySelectorAll('.skill-tag')).map(tag => tag.textContent.toLowerCase());
            const projectName = card.querySelector('.project-name').textContent.toLowerCase();
            const rating = card.querySelector('.rating span').textContent.toLowerCase();
            
            // Check if search term matches any field
            const matchesSearch = searchTerm === '' || 
              freelancerName.includes(searchTerm) ||
              skills.some(skill => skill.includes(searchTerm)) ||
              projectName.includes(searchTerm) ||
              rating.includes(searchTerm);
            
            // Show/hide freelancer card
            if (matchesSearch) {
              card.style.display = 'block';
              card.style.animation = 'fadeIn 0.3s ease';
              visibleCount++;
            } else {
              card.style.display = 'none';
            }
          });
          
          // Update results counter and no results message
          updateSearchResults(visibleCount);
        }
        
        // Debounce function for better performance
        function debounce(func, wait) {
          let timeout;
          return function executedFunction(...args) {
            const later = () => {
              clearTimeout(timeout);
              func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
          };
        }
        
        // Add event listeners with debounced search
        const debouncedFilter = debounce(filterFreelancers, 300);
        
        searchInput.addEventListener('input', debouncedFilter);
        searchInput.addEventListener('keypress', function(e) {
          if (e.key === 'Enter') {
            e.preventDefault();
            filterFreelancers();
          }
        });
        
        searchBtn.addEventListener('click', function(e) {
          e.preventDefault();
          filterFreelancers();
        });
        
        // Update search results feedback
        function updateSearchResults(visibleCount) {
          const totalCount = freelancerCards.length;
          
          // Update stats card with active freelancers
          const activeFreelancersCount = document.querySelector('.stat-number');
          if (activeFreelancersCount) {
            activeFreelancersCount.textContent = visibleCount;
          }
          
          // Show/hide results counter
          updateResultsCounter(visibleCount, totalCount);
          
          // Show/hide no results message
          updateNoResultsMessage(visibleCount);
        }
        
        function updateResultsCounter(visibleCount, totalCount) {
          let counter = document.querySelector('.results-counter');
          
          if (!counter) {
            counter = document.createElement('div');
            counter.className = 'results-counter';
            counter.style.cssText = `
              color: #666;
              font-size: 14px;
              margin-bottom: 20px;
              padding: 10px 0;
              border-bottom: 1px solid #eee;
              display: flex;
              align-items: center;
              gap: 10px;
            `;
            
            const contentCard = document.querySelector('.content-card');
            const searchSection = document.querySelector('.search-section');
            if (searchSection) {
              contentCard.insertBefore(counter, searchSection.nextSibling);
            }
          }
          
          if (searchInput.value.trim() !== '') {
            counter.innerHTML = `
              <i class="fas fa-filter" style="color: #2563eb;"></i>
              <span>Showing ${visibleCount} of ${totalCount} freelancers</span>
            `;
            counter.style.display = 'flex';
          } else {
            counter.style.display = 'none';
          }
        }
        
        function updateNoResultsMessage(visibleCount) {
          let noResultsMsg = document.querySelector('.no-search-results');
          
          if (visibleCount === 0 && freelancerCards.length > 0) {
            // Create no results message if it doesn't exist
            if (!noResultsMsg) {
              noResultsMsg = document.createElement('div');
              noResultsMsg.className = 'no-search-results';
              noResultsMsg.innerHTML = `
                <div style="text-align: center; padding: 50px; color: #666;">
                  <i class="fas fa-search" style="font-size: 48px; color: #ddd; margin-bottom: 20px;"></i>
                  <h3>No freelancers found</h3>
                  <p>Try adjusting your search criteria or check the spelling</p>
                  <button onclick="clearSearch()" style="
                    margin-top: 15px;
                    padding: 8px 16px;
                    background: #2563eb;
                    color: white;
                    border: none;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 13px;
                  ">Clear Search</button>
                </div>
              `;
              
              const contentCard = document.querySelector('.content-card');
              contentCard.appendChild(noResultsMsg);
            }
            noResultsMsg.style.display = 'block';
          } else if (noResultsMsg) {
            noResultsMsg.style.display = 'none';
          }
        }
        
        // Global function to clear search
        window.clearSearch = function() {
          searchInput.value = '';
          filterFreelancers();
          searchInput.focus();
        };
        
        // Add search enhancements
        
        // Animated placeholder
        const placeholders = [
          'Search freelancers, skills...',
          'Try "React", "Node.js"...',
          'Search by name...',
          'Find specific skills...'
        ];
        
        let placeholderIndex = 0;
        
        function animatePlaceholder() {
          if (searchInput.value === '') {
            searchInput.placeholder = placeholders[placeholderIndex];
            placeholderIndex = (placeholderIndex + 1) % placeholders.length;
          }
        }
        
        // Change placeholder every 3 seconds
        setInterval(animatePlaceholder, 3000);
        
        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
          // Ctrl/Cmd + K to focus search
          if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            searchInput.focus();
          }
          
          // Escape to clear search
          if (e.key === 'Escape' && document.activeElement === searchInput) {
            clearSearch();
          }
        });
        
        // Highlight search matches
        function highlightMatches(text, searchTerm) {
          if (!searchTerm) return text;
          
          const regex = new RegExp(`(${searchTerm})`, 'gi');
          return text.replace(regex, '<mark style="background: #fff3cd; padding: 1px 2px; border-radius: 2px;">$1</mark>');
        }
        
        // Enhanced search with highlighting (optional enhancement)
        function filterFreelancersWithHighlight() {
          const searchTerm = searchInput.value.toLowerCase().trim();
          let visibleCount = 0;
          
          freelancerCards.forEach(card => {
            const nameElement = card.querySelector('.freelancer-name');
            const projectElement = card.querySelector('.project-name');
            const originalName = nameElement.getAttribute('data-original') || nameElement.textContent;
            const originalProject = projectElement.getAttribute('data-original') || projectElement.textContent;
            
            // Store original text if not already stored
            if (!nameElement.getAttribute('data-original')) {
              nameElement.setAttribute('data-original', originalName);
            }
            if (!projectElement.getAttribute('data-original')) {
              projectElement.setAttribute('data-original', originalProject);
            }
            
            const freelancerName = originalName.toLowerCase();
            const skills = Array.from(card.querySelectorAll('.skill-tag')).map(tag => tag.textContent.toLowerCase());
            const projectName = originalProject.toLowerCase();
            
            const matchesSearch = searchTerm === '' || 
              freelancerName.includes(searchTerm) ||
              skills.some(skill => skill.includes(searchTerm)) ||
              projectName.includes(searchTerm);
            
            if (matchesSearch) {
              // Highlight matches if search term exists
              if (searchTerm) {
                nameElement.innerHTML = highlightMatches(originalName, searchTerm);
                projectElement.innerHTML = highlightMatches(originalProject, searchTerm);
              } else {
                nameElement.innerHTML = originalName;
                projectElement.innerHTML = originalProject;
              }
              
              card.style.display = 'block';
              visibleCount++;
            } else {
              card.style.display = 'none';
            }
          });
          
          updateSearchResults(visibleCount);
        }
        
        // Replace the basic filter with enhanced version
        const debouncedEnhancedFilter = debounce(filterFreelancersWithHighlight, 300);
        
        searchInput.removeEventListener('input', debouncedFilter);
        searchInput.addEventListener('input', debouncedEnhancedFilter);
        
        // Update search button click handler
        searchBtn.removeEventListener('click', filterFreelancers);
        searchBtn.addEventListener('click', function(e) {
          e.preventDefault();
          filterFreelancersWithHighlight();
        });
        
        // Add fade-in animation CSS
        const style = document.createElement('style');
        style.textContent = `
          @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
          }
          
          .search-input:focus {
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
          }
          
          .search-btn:hover {
            background: #1e40af !important;
            transform: scale(1.05);
          }
        `;
        document.head.appendChild(style);
      });
    </script>
  </body>
</html>
