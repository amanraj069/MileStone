<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Job Listings - Admin Dashboard</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <link rel="stylesheet" href="/css/adminD/sidebar.css" />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: #f8f9fa;
        color: #333;
      }

      .main-content {
        margin-left: 260px;
        padding: 20px;
        min-height: 100vh;
        max-width: calc(100vw - 280px);
        overflow-x: hidden;
      }

      .page-header {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        border-left: 4px solid #2563eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .page-title {
        font-size: 28px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
      }

      .page-subtitle {
        color: #666;
        font-size: 16px;
      }

      .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        border-left: 4px solid #2563eb;
      }

      .stat-number {
        font-size: 32px;
        font-weight: 700;
        color: #2563eb;
        margin-bottom: 5px;
      }

      .stat-label {
        color: #666;
        font-size: 14px;
      }

      .content-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 25px;
        margin-bottom: 20px;
      }

      .search-container {
        margin-bottom: 25px;
      }

      .search-form {
        display: flex;
        align-items: center;
        max-width: 600px;
        position: relative;
        gap: 10px;
      }

      .search-input {
        flex: 1;
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 14px;
        background: #f8f9fa;
        transition: all 0.3s ease;
      }

      .search-input:focus {
        outline: none;
        border-color: #2563eb;
        background: white;
      }

      .search-button {
        background: linear-gradient(45deg, #2563eb, #1e40af);
        color: white;
        border: none;
        padding: 12px 16px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .search-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.4);
      }

      .clear-search {
        background: linear-gradient(45deg, #ef4444, #dc2626);
        color: white;
        padding: 12px 16px;
        border-radius: 8px;
        text-decoration: none;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
      }

      .clear-search:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
      }

      .filter-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        flex-wrap: wrap;
        gap: 15px;
      }

      .filter-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
      }

      .filter-btn {
        background: #f8f9fa;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        padding: 10px 20px;
        color: #666;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 500;
        font-size: 14px;
      }

      .filter-btn:hover,
      .filter-btn.active {
        background: linear-gradient(45deg, #2563eb, #1e40af);
        color: white;
        border-color: #2563eb;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
      }

      .feature-dropdown {
        position: relative;
      }

      .feature-select {
        background: white;
        border: 2px solid #e1e5e9;
        border-radius: 10px;
        padding: 10px 16px;
        font-size: 14px;
        font-weight: 500;
        color: #333;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        min-width: 180px;
      }

      .feature-select:focus {
        outline: none;
        border-color: #2563eb;
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.2);
      }

      .feature-select:hover {
        border-color: #2563eb;
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.1);
      }

      .jobs-container {
        display: grid;
        gap: 20px;
      }

      .job-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        border: 1px solid #e1e5e9;
        transition: all 0.3s ease;
        position: relative;
        cursor: pointer;
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 20px;
        align-items: flex-start;
      }

      .job-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        border-color: #2563eb;
      }

      .job-card.hidden {
        display: none;
      }

      .company-logo {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        overflow: hidden;
        background: #f3f4f6;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
      }

      .company-logo img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .company-logo i {
        font-size: 24px;
        color: #9ca3af;
      }

      .job-card-content {
        flex: 1;
        position: relative;
      }

      .job-card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 10px;
      }

      .job-title {
        font-size: 20px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
        line-height: 1.4;
      }

      .job-status {
        position: absolute;
        top: 0;
        right: 0;
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 12px;
        font-weight: 500;
      }

      .status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        animation: pulse 2s infinite;
      }

      .status-text.open {
        color: #10b981;
      }

      .status-text.closed {
        color: #ef4444;
      }

      .status-indicator.open {
        background: #10b981;
      }

      .status-indicator.closed {
        background: #ef4444;
      }

      @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
      }

      .job-company {
        color: #666;
        font-weight: 500;
        margin-bottom: 12px;
        display: flex;
        align-items: center;
        gap: 6px;
      }

      .job-salary {
        color: #10b981;
        font-weight: 600;
        font-size: 18px;
        margin-bottom: 12px;
      }

      .job-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
        margin-bottom: 15px;
      }

      .job-tag {
        background: linear-gradient(45deg, #e0e7ff, #c7d2fe);
        color: #3730a3;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 11px;
        font-weight: 500;
      }

      .job-details {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        color: #666;
        font-size: 14px;
        margin-bottom: 15px;
      }

      .job-detail-item {
        display: flex;
        align-items: center;
        gap: 6px;
      }

      .job-detail-item i {
        color: #999;
        width: 16px;
      }

      .job-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .applicants-badge {
        background: linear-gradient(45deg, #2563eb, #1e40af);
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 6px;
      }

      .btn-delete {
        background: linear-gradient(45deg, #ef4444, #dc2626);
        color: white;
        padding: 8px 12px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 14px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .btn-delete:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
      }

      .feature-checkbox-container {
        display: inline-flex;
        align-items: center;
        padding: 8px 12px;
        border-radius: 20px;
        border: 2px solid #e1e5e9;
        background: white;
        transition: all 0.3s ease;
        cursor: pointer;
        font-size: 12px;
        font-weight: 500;
        margin-right: 8px;
        min-width: auto;
        white-space: nowrap;
      }

      .feature-checkbox-container.new {
        border-color: #10b981;
        background: #f0fdf4;
        color: #10b981;
      }

      .feature-checkbox-container.urgent {
        border-color: #ef4444;
        background: #fef2f2;
        color: #ef4444;
      }

      .feature-checkbox-container.high-demand {
        border-color: #f59e0b;
        background: #fffbeb;
        color: #f59e0b;
      }

      .feature-checkbox {
        display: none;
      }

      .feature-label {
        font-size: 12px;
        font-weight: 500;
        cursor: pointer;
        margin: 0;
      }

      .feature-checkbox-container:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      .feature-checkbox:checked + .feature-label::before {
        content: "✓ ";
        font-weight: bold;
      }

      .no-results {
        text-align: center;
        padding: 3rem;
        color: #6b7280;
      }

      .no-results i {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: #d1d5db;
      }

      .no-results p {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
      }

      /* Responsive design */
      @media (max-width: 1200px) {
        .main-content {
          margin-left: 260px;
          padding: 15px;
          max-width: calc(100vw - 280px);
        }
      }

      @media (max-width: 768px) {
        .main-content {
          margin-left: 0;
          padding: 10px;
          max-width: 100vw;
        }

        .page-header {
          padding: 15px;
          flex-direction: column;
          gap: 10px;
          text-align: center;
        }

        .content-card {
          padding: 15px;
        }

        .search-form {
          flex-direction: column;
          max-width: 100%;
        }

        .search-input {
          border-radius: 8px;
        }

        .job-card {
          grid-template-columns: 1fr;
          text-align: left;
        }

        .job-actions {
          flex-direction: column;
          gap: 10px;
        }

        .stats-container {
          grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }

        .filter-container {
          flex-direction: column;
          align-items: stretch;
          gap: 15px;
        }

        .filter-buttons {
          justify-content: center;
        }
      }
    </style>

  </head>
  <body>
    <%- include('Partials/sidebar', { user: user, activePage: 'job_listings' })
    %>

    <div class="main-content">
      <div class="page-header">
        <div>
          <h1 class="page-title">Job Listings Management</h1>
          <p class="page-subtitle">
            Monitor and manage all job postings across the platform
          </p>
        </div>
      </div>

      <div class="stats-container">
        <div class="stat-card">
          <div class="stat-number"><%= jobs.length %></div>
          <div class="stat-label">Total Jobs</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            <%= jobs.filter(job => job.status === 'open').length %>
          </div>
          <div class="stat-label">Active Jobs</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            <%= jobs.reduce((sum, job) => sum + (job.applications?.length || 0),
            0) %>
          </div>
          <div class="stat-label">Total Applications</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            <%= jobs.filter(job => job.status === 'closed').length %>
          </div>
          <div class="stat-label">Completed Jobs</div>
        </div>
      </div>

      <div class="content-card">
        <div class="search-container">
          <form action="/adminD/job_listings" method="GET" class="search-form">
            <input
              type="text"
              name="q"
              id="searchInput"
              value="<%= typeof searchQuery !== 'undefined' ? searchQuery : '' %>"
              placeholder="Search by job title, company, or skills..."
              class="search-input"
            />
            <button type="submit" class="search-button">
              <i class="fas fa-search"></i>
            </button>
            <% if (typeof searchQuery !== 'undefined' && searchQuery) { %>
            <a href="/adminD/job_listings" class="clear-search">
              <i class="fas fa-times"></i> Clear
            </a>
            <% } %>
          </form>
        </div>

        <div class="filter-container">
          <div class="filter-buttons">
            <button class="filter-btn" data-filter="all">All</button>
            <button class="filter-btn" data-filter="open">Open</button>
            <button class="filter-btn" data-filter="closed">Closed</button>
          </div>
          <div class="feature-dropdown">
            <select id="featureSelect" class="feature-select">
              <option value="">Feature Job Post</option>
              <option value="urgent">Urgent</option>
              <option value="new">New</option>
              <option value="high-demand">High Demand</option>
            </select>
          </div>
        </div>

        <div class="jobs-container">
          <% if (jobs.length === 0) { %>
          <div class="no-results">
            <i class="fas fa-briefcase"></i>
            <p>No job listings found.</p>
            <% if (typeof searchQuery !== 'undefined' && searchQuery) { %>
            <p>Try adjusting your search criteria.</p>
            <% } %>
          </div>
          <% } else { %> <% jobs.forEach(job => { %>
          <div class="job-card" data-status="<%= job.status || 'open' %>" onclick="window.location.href='/jobs/<%= job.jobId || job._id %>'" title="View Details">
            <div class="company-logo">
              <% if (job.imageUrl) { %>
              <img
                src="<%= job.imageUrl %>"
                alt="Company Logo"
                onerror="this.style.display='none'; this.parentElement.innerHTML='<i class=&quot;fas fa-building&quot;></i>'"
              />
              <% } else { %>
              <i class="fas fa-building"></i>
              <% } %>
            </div>

            <div class="job-card-content">
              <div class="job-status">
                <div class="status-indicator <%= job.status || 'open' %>"></div>
                <span class="status-text <%= job.status || 'open' %>">
                  <%= (job.status || 'open').charAt(0).toUpperCase() + (job.status || 'open').slice(1) %>
                </span>
              </div>

              <h3 class="job-title"><%= job.title || 'Untitled Job' %></h3>
              
              <% if (job.companyName) { %>
              <p class="job-company">
                <i class="fas fa-building"></i>
                <%= job.companyName %>
              </p>
              <% } %>
              
              <p class="job-salary">
                <%= job.formattedBudget || job.budget || 'Budget not specified' %>
              </p>

              <% if (job.description && job.description.skills && job.description.skills.length > 0) { %>
              <div class="job-tags">
                <% job.description.skills.slice(0, 4).forEach(skill => { %>
                <span class="job-tag"><%= skill %></span>
                <% }) %> 
                <% if (job.description.skills.length > 4) { %>
                <span class="job-tag">+<%= job.description.skills.length - 4 %> more</span>
                <% } %>
              </div>
              <% } %>

              <div class="job-details">
                <div class="job-detail-item">
                  <i class="fas fa-map-marker-alt"></i>
                  <span><%= job.location || 'Remote' %></span>
                </div>
                <div class="job-detail-item">
                  <i class="fas fa-briefcase"></i>
                  <span><%= job.jobType || 'Full-time' %></span>
                </div>
                <div class="job-detail-item">
                  <i class="fas fa-calendar"></i>
                  <span>Posted <%= job.formattedDate || 'Recently' %></span>
                </div>
              </div>

              <div class="job-actions">
                <div class="applicants-badge">
                  <i class="fas fa-users"></i>
                  <%= job.applications?.length || 0 %> applicants
                </div>
                <div style="display: flex; align-items: center; gap: 8px;">
                  <div class="feature-checkbox-container" style="display: none;" data-feature-type="" onclick="event.stopPropagation()">
                    <input 
                      type="checkbox" 
                      class="feature-checkbox" 
                      data-job-id="<%= job.jobId %>" 
                      <%= job.featured && job.featured.isActive ? 'checked' : '' %>
                      <% if (job.featured && job.featured.isActive && job.featured.type) { %>
                        data-original-feature-type="<%= job.featured.type %>"
                      <% } %>
                    />
                    <label class="feature-label">
                      <% if (job.featured && job.featured.isActive && job.featured.type) { %>
                        Featured as <%= job.featured.type.charAt(0).toUpperCase() + job.featured.type.slice(1).replace('-', ' ') %>
                      <% } else { %>
                        Feature this job
                      <% } %>
                    </label>
                  </div>
                  <button
                    class="btn-delete"
                    onclick="event.stopPropagation(); deleteJob('<%= job.jobId || job._id %>')"
                    title="Delete Job"
                  >
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
          <% }) %> <% } %>
        </div>
      </div>
    </div>

    <script src="/js/adminD/job_listings.js"></script>
    <script>
      // Initialize featured jobs styling on page load
      document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.feature-checkbox').forEach(checkbox => {
          if (checkbox.checked && checkbox.hasAttribute('data-original-feature-type')) {
            const originalFeatureType = checkbox.getAttribute('data-original-feature-type');
            const container = checkbox.closest('.feature-checkbox-container');
            const label = container.querySelector('.feature-label');
            
            // Apply the original feature type styling
            container.className = `feature-checkbox-container ${originalFeatureType}`;
            label.className = `feature-label ${originalFeatureType}`;
          }
        });
      });

      // Filter buttons functionality
      document.querySelectorAll(".filter-btn").forEach((button) => {
        button.addEventListener("click", () => {
          document
            .querySelectorAll(".filter-btn")
            .forEach((btn) => btn.classList.remove("active"));
          button.classList.add("active");

          const filter = button.getAttribute("data-filter");
          document.querySelectorAll(".job-card").forEach((card) => {
            if (
              filter === "all" ||
              card.getAttribute("data-status") === filter
            ) {
              card.classList.remove("hidden");
            } else {
              card.classList.add("hidden");
            }
          });
        });
      });

      // Feature dropdown functionality
      const featureSelect = document.getElementById('featureSelect');
      const checkboxContainers = document.querySelectorAll('.feature-checkbox-container');
      
      featureSelect.addEventListener('change', function() {
        const selectedValue = this.value;
        
        if (selectedValue) {
          // Show all checkboxes with proper styling
          checkboxContainers.forEach(container => {
            container.style.display = 'inline-flex';
            
            const label = container.querySelector('.feature-label');
            const checkbox = container.querySelector('.feature-checkbox');
            
            // Check if this checkbox is already checked (already featured)
            if (checkbox.checked) {
              // If already featured, preserve its original feature type and styling
              const originalFeatureType = checkbox.getAttribute('data-original-feature-type');
              if (originalFeatureType) {
                // Keep the original styling and label
                container.className = `feature-checkbox-container ${originalFeatureType}`;
                label.textContent = `Featured as ${originalFeatureType.charAt(0).toUpperCase() + originalFeatureType.slice(1).replace('-', ' ')}`;
              }
            } else {
              // If not featured, update to current selection
              container.className = `feature-checkbox-container ${selectedValue}`;
              container.setAttribute('data-feature-type', selectedValue);
              label.textContent = `Feature as ${selectedValue.charAt(0).toUpperCase() + selectedValue.slice(1).replace('-', ' ')}`;
              checkbox.setAttribute('data-feature-type', selectedValue);
            }
          });
        } else {
          // Hide all checkboxes
          checkboxContainers.forEach(container => {
            container.style.display = 'none';
          });
        }
      });

      // Handle feature container clicks
      document.querySelectorAll('.feature-checkbox-container').forEach(container => {
        container.addEventListener('click', function(event) {
          event.stopPropagation();
          const checkbox = this.querySelector('.feature-checkbox');
          if (checkbox) {
            checkbox.checked = !checkbox.checked;
            checkbox.dispatchEvent(new Event('change'));
          }
        });
      });

      // Handle checkbox changes
      document.querySelectorAll('.feature-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
          const jobId = this.getAttribute('data-job-id');
          const featureType = this.getAttribute('data-feature-type');
          const isChecked = this.checked;
          const container = this.closest('.feature-checkbox-container');
          const label = container.querySelector('.feature-label');
          
          // Update label text based on checked status and store/remove original feature type
          if (isChecked) {
            // Store the original feature type for future reference
            this.setAttribute('data-original-feature-type', featureType);
            label.textContent = `Featured as ${featureType.charAt(0).toUpperCase() + featureType.slice(1).replace('-', ' ')}`;
            // Update container styling to match the feature type
            container.className = `feature-checkbox-container ${featureType}`;
          } else {
            // Remove the original feature type when unfeatured
            this.removeAttribute('data-original-feature-type');
            label.textContent = `Feature as ${featureType.charAt(0).toUpperCase() + featureType.slice(1).replace('-', ' ')}`;
            // Reset to default styling when unchecked
            const currentSelection = featureSelect.value;
            if (currentSelection) {
              container.className = `feature-checkbox-container ${currentSelection}`;
            } else {
              container.className = 'feature-checkbox-container';
            }
          }
          
          // Send AJAX request to update feature status
          fetch('/adminD/jobs/feature', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              jobId: jobId,
              featureType: featureType,
              isActive: isChecked
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
                console.log('Job feature status updated successfully');
                // Show correct message for feature/unfeature
                if (isChecked) {
                  showNotification(`Job featured as ${featureType} successfully!`, 'success');
                } else {
                  showNotification('Job unfeatured successfully!', 'success');
                }
            } else {
              console.error('Error updating job feature status:', data.message);
              // Revert checkbox state and label
              this.checked = !isChecked;
              if (!isChecked) {
                this.setAttribute('data-original-feature-type', featureType);
                label.textContent = `Featured as ${featureType.charAt(0).toUpperCase() + featureType.slice(1).replace('-', ' ')}`;
                container.className = `feature-checkbox-container ${featureType}`;
              } else {
                this.removeAttribute('data-original-feature-type');
                label.textContent = `Feature as ${featureType.charAt(0).toUpperCase() + featureType.slice(1).replace('-', ' ')}`;
                const currentSelection = featureSelect.value;
                if (currentSelection) {
                  container.className = `feature-checkbox-container ${currentSelection}`;
                } else {
                  container.className = 'feature-checkbox-container';
                }
              }
              showNotification('Error updating job feature status', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            // Revert checkbox state and label
            this.checked = !isChecked;
            if (!isChecked) {
              this.setAttribute('data-original-feature-type', featureType);
              label.textContent = `Featured as ${featureType.charAt(0).toUpperCase() + featureType.slice(1).replace('-', ' ')}`;
              container.className = `feature-checkbox-container ${featureType}`;
            } else {
              this.removeAttribute('data-original-feature-type');
              label.textContent = `Feature as ${featureType.charAt(0).toUpperCase() + featureType.slice(1).replace('-', ' ')}`;
              const currentSelection = featureSelect.value;
              if (currentSelection) {
                container.className = `feature-checkbox-container ${currentSelection}`;
              } else {
                container.className = 'feature-checkbox-container';
              }
            }
            showNotification('Network error occurred', 'error');
          });
        });
      });

      // Notification function
      function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          padding: 15px 20px;
          background: ${type === 'success' ? '#4CAF50' : '#f44336'};
          color: white;
          border-radius: 4px;
          z-index: 1000;
          font-size: 14px;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      }
    </script>
  </body>
</html>
