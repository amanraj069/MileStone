<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Add New Skill Quiz</title>
    <link rel="stylesheet" href="/css/adminD/sidebar.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: #f8f9fa;
        color: #333;
      }

      .dashboard-wrapper {
        display: flex;
        min-height: 100vh;
      }

      .main-content {
        margin-left: 260px;
        padding: 30px;
        min-height: 100vh;
      }

      .page-header {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        border-left: 4px solid #2563eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .page-title {
        font-size: 28px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
      }

      .page-subtitle {
        color: #666;
        font-size: 16px;
      }

      .back-link {
        background: linear-gradient(45deg, #6b7280, #4b5563);
        color: white;
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .back-link:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(107, 114, 128, 0.4);
      }

      .content-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 30px;
        margin-bottom: 20px;
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #333;
        font-size: 14px;
      }

      .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 14px;
        background: white;
        transition: all 0.3s ease;
      }

      .form-control:focus {
        outline: none;
        border-color: #2563eb;
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
      }

      .questions-container {
        margin-bottom: 30px;
      }

      .question-card {
        background: #f8f9fa;
        border: 2px solid #e1e5e9;
        border-radius: 12px;
        padding: 25px;
        margin-bottom: 25px;
        position: relative;
        transition: all 0.3s ease;
      }

      .question-card:hover {
        border-color: #2563eb;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
      }

      .delete-question {
        background: #ef4444;
        color: white;
        border: none;
        border-radius: 6px;
        width: 28px;
        height: 28px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        flex-shrink: 0;
      }

      .delete-question:hover {
        background: #dc2626;
        transform: scale(1.1);
      }

      .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e1e5e9;
      }

      .question-title-group {
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .question-controls {
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .question-header h4 {
        color: #2563eb;
        font-size: 18px;
        margin: 0;
      }

      .marks-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
        color: #666;
      }

      .marks-input {
        width: 60px;
        padding: 6px 8px;
        border: 2px solid #e1e5e9;
        border-radius: 6px;
        text-align: center;
      }

      .options-container {
        margin-bottom: 20px;
      }

      .option-group {
        display: block;
        margin-bottom: 12px;
      }

      .option-label {
        background: #2563eb;
        color: white;
        border-radius: 50%;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 12px;
        flex-shrink: 0;
      }

      .option-input {
        flex: 1;
        padding: 10px 14px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
      }

      .option-input:focus {
        outline: none;
        border-color: #2563eb;
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
      }

      .correct-answer-select {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 14px;
        background: white;
        transition: all 0.3s ease;
      }

      .correct-answer-select:focus {
        outline: none;
        border-color: #2563eb;
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
      }

      .btn-add-question {
        background: linear-gradient(45deg, #2563eb, #1e40af);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 30px;
        transition: all 0.3s ease;
      }

      .btn-add-question:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(37, 99, 235, 0.4);
      }

      .btn-submit {
        background: linear-gradient(45deg, #10b981, #059669);
        color: white;
        border: none;
        padding: 16px 32px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        width: 100%;
        transition: all 0.3s ease;
      }

      .btn-submit:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(16, 185, 129, 0.4);
      }

      .error-message {
        color: #ef4444;
        font-size: 12px;
        margin-top: 5px;
        font-weight: 500;
        display: none;
      }

      .field-error {
        color: #ef4444;
        font-size: 12px;
        margin-top: 5px;
        font-weight: 500;
        display: block;
        min-height: 16px;
      }

      .form-control.error,
      .option-input.error,
      .correct-answer-select.error {
        border-color: #ef4444 !important;
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1) !important;
      }

      .form-control.valid,
      .option-input.valid {
        border-color: #10b981 !important;
        box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1) !important;
      }
    </style>
  </head>
  <body>
    <div class="dashboard-wrapper">
      <%- include('../Partials/sidebar', { user: user, activePage: 'quizzes' }) %>
      <div class="main-content">
        <div class="page-header">
          <div>
            <h1 class="page-title">Add New Skill Quiz</h1>
            <p class="page-subtitle">Create assessment questions for skill evaluation</p>
          </div>
          <a href="/adminD/quizzes" class="back-link">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M19 12H5M12 19l-7-7 7-7" />
            </svg>
            Back to Quizzes
          </a>
        </div>

        <div class="content-card">
          <form id="quiz-form" method="POST" action="/adminD/quizzes/add">
              <div class="form-group">
                <label for="skill-name">Skill Name</label>
                <input
                  type="text"
                  id="skill-name"
                  name="name"
                  class="form-control"
                  required
                  placeholder="Enter skill name (e.g. JavaScript, Python, React)"
                />
                <div class="field-error" id="skill-name-error"></div>
              </div>

              <div class="questions-container" id="questions-container">
                <!-- Question cards will be added here -->
              </div>

              <button
                type="button"
                class="btn-add-question"
                id="add-question-btn"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <line x1="12" y1="5" x2="12" y2="19"></line>
                  <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
                Add Question
              </button>

              <input
                type="hidden"
                id="questions-json"
                name="questions"
                value="[]"
              />

              <button type="submit" class="btn-submit">
                Create Skill Quiz
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Enhanced form validation and dynamic HTML implementation
      document.addEventListener("DOMContentLoaded", function () {
        const questionsContainer = document.getElementById("questions-container");
        const addQuestionBtn = document.getElementById("add-question-btn");
        const questionsJsonInput = document.getElementById("questions-json");
        const skillNameInput = document.getElementById("skill-name");

        let questions = [];
        let questionIdCounter = 0;

        // Enhanced skill name validation
        function validateSkillName() {
          const value = skillNameInput.value.trim();
          const errorDiv = document.getElementById('skill-name-error');
          
          // Clear previous styling
          skillNameInput.classList.remove('error', 'valid');
          errorDiv.textContent = '';

          if (value.length === 0) {
            showInputError(skillNameInput, errorDiv, 'Skill name is required');
            return false;
          }

          if (value.length < 3) {
            showInputError(skillNameInput, errorDiv, 'Minimum 3 characters required');
            return false;
          }

          if (value.length > 50) {
            showInputError(skillNameInput, errorDiv, 'Maximum 50 characters allowed');
            return false;
          }

          const specialCharPattern = /[<>{}]/;
          if (specialCharPattern.test(value)) {
            showInputError(skillNameInput, errorDiv, 'Special characters < > { } are not allowed');
            return false;
          }

          // Valid input
          skillNameInput.classList.add('valid');
          errorDiv.textContent = '';
          return true;
        }

        function showInputError(inputElement, errorElement, message) {
          inputElement.classList.add('error');
          inputElement.classList.remove('valid');
          errorElement.textContent = message;
        }

        function showInputSuccess(inputElement, errorElement) {
          inputElement.classList.add('valid');
          inputElement.classList.remove('error');
          errorElement.textContent = '';
        }

        function validateQuestionText(questionIndex, value) {
          const questionCard = document.querySelector(`.question-card[data-index="${questionIndex}"]`);
          const questionTextInput = questionCard.querySelector('.question-text');
          let errorElement = questionCard.querySelector('.question-text-error');
          
          if (!errorElement) {
            errorElement = document.createElement('div');
            errorElement.className = 'field-error question-text-error';
            questionTextInput.parentNode.appendChild(errorElement);
          }

          questionTextInput.classList.remove('error', 'valid');
          const trimmedValue = value.trim();

          if (trimmedValue.length === 0) {
            showInputError(questionTextInput, errorElement, 'Question text is required');
            return false;
          }

          if (trimmedValue.length < 10) {
            showInputError(questionTextInput, errorElement, 'Minimum 10 characters required');
            return false;
          }

          if (trimmedValue.length > 500) {
            showInputError(questionTextInput, errorElement, 'Maximum 500 characters allowed');
            return false;
          }

          showInputSuccess(questionTextInput, errorElement);
          return true;
        }

        function validateOption(questionIndex, optionIndex, value) {
          const questionCard = document.querySelector(`.question-card[data-index="${questionIndex}"]`);
          const optionInputs = questionCard.querySelectorAll('.option-input');
          const optionInput = optionInputs[optionIndex];
          
          if (!optionInput) return false;

          let errorElement = optionInput.parentNode.querySelector('.option-error');
          if (!errorElement) {
            errorElement = document.createElement('div');
            errorElement.className = 'field-error option-error';
            optionInput.parentNode.appendChild(errorElement);
          }

          optionInput.classList.remove('error', 'valid');
          const trimmedValue = value.trim();

          if (trimmedValue.length === 0) {
            showInputError(optionInput, errorElement, 'Option text is required');
            return false;
          }

          if (trimmedValue.length < 2) {
            showInputError(optionInput, errorElement, 'Minimum 2 characters required');
            return false;
          }

          if (trimmedValue.length > 100) {
            showInputError(optionInput, errorElement, 'Maximum 100 characters allowed');
            return false;
          }

          showInputSuccess(optionInput, errorElement);
          return true;
        }

        function validateCorrectAnswer(questionIndex) {
          const questionCard = document.querySelector(`.question-card[data-index="${questionIndex}"]`);
          const correctAnswerSelect = questionCard.querySelector('.correct-answer-select');
          let errorElement = questionCard.querySelector('.correct-answer-error');
          
          if (!errorElement) {
            errorElement = document.createElement('div');
            errorElement.className = 'field-error correct-answer-error';
            correctAnswerSelect.parentNode.appendChild(errorElement);
          }

          correctAnswerSelect.classList.remove('error', 'valid');

          if (!correctAnswerSelect.value || correctAnswerSelect.value === '') {
            showInputError(correctAnswerSelect, errorElement, 'Please select the correct answer');
            return false;
          }

          showInputSuccess(correctAnswerSelect, errorElement);
          return true;
        }

        skillNameInput.addEventListener('input', validateSkillName);
        skillNameInput.addEventListener('blur', validateSkillName);

        function updateQuestionsJson() {
          // Clean up questions data before stringifying
          const cleanedQuestions = questions.map(q => ({
            questionText: q.questionText || "",
            options: Array.isArray(q.options) ? q.options.filter(opt => opt && opt.trim() !== "") : [],
            correctAnswer: q.correctAnswer || "",
            marks: parseInt(q.marks) || 1
          }));
          
          questionsJsonInput.value = JSON.stringify(cleanedQuestions);
          updateQuizStatistics();
        }

        function updateQuizStatistics() {
          // Create or update statistics display
          let statsContainer = document.querySelector('.quiz-statistics');
          if (!statsContainer) {
            statsContainer = document.createElement('div');
            statsContainer.className = 'quiz-statistics';
            statsContainer.style.cssText = 'background: #f0f9ff; padding: 15px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #0ea5e9;';
            questionsContainer.parentNode.insertBefore(statsContainer, questionsContainer);
          }

          const totalQuestions = questions.length;
          const totalMarks = questions.reduce((sum, q) => sum + (parseInt(q.marks) || 1), 0);
          const completedQuestions = questions.filter(q => 
            q.questionText && q.questionText.trim() !== '' && 
            q.correctAnswer && q.correctAnswer.trim() !== '' &&
            q.options.filter(opt => opt && opt.trim() !== '').length >= 2
          ).length;

          statsContainer.innerHTML = `
            <h4 style="color: #0ea5e9; margin-bottom: 10px; font-size: 16px;">Quiz Statistics</h4>
            <div style="display: flex; gap: 20px; flex-wrap: wrap;">
              <div>Total Questions: <strong>${totalQuestions}</strong></div>
              <div>Total Marks: <strong>${totalMarks}</strong></div>
              <div>Completed: <strong>${completedQuestions}/${totalQuestions}</strong></div>
              <div>Progress: <strong>${totalQuestions > 0 ? Math.round((completedQuestions / totalQuestions) * 100) : 0}%</strong></div>
            </div>
          `;
        }

        function createQuestionCard(questionIndex, questionData = null) {
          const questionCard = document.createElement("div");
          questionCard.className = "question-card";
          questionCard.dataset.index = questionIndex;
          questionCard.style.animation = 'fadeIn 0.3s ease-in';

          const questionText = questionData ? questionData.questionText : "";
          const marks = questionData ? questionData.marks : 1;
          const correctAnswer = questionData ? questionData.correctAnswer : "";

          questionCard.innerHTML = `
            <div class="question-header">
              <div class="question-title-group">
                <h4>Question ${questionIndex + 1}</h4>
                <div class="question-status" style="padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: 500;">
                  <span class="status-text">Incomplete</span>
                </div>
              </div>
              <div class="question-controls">
                <div class="marks-label">
                  Marks:
                  <input type="number" class="marks-input" value="${marks}" min="1" max="10"
                    oninput="updateQuestionMarks(${questionIndex}, this.value)">
                </div>
                <button type="button" class="delete-question" onclick="deleteQuestion(${questionIndex})" ${questions.length <= 1 ? 'disabled' : ''}>
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                  </svg>
                </button>
              </div>
            </div>
            <div class="form-group">
              <label>Question Text <span style="color: #ef4444;">*</span></label>
              <textarea class="form-control question-text" rows="3" value="${questionText}" 
                placeholder="Enter your question (minimum 10 characters)" 
                oninput="updateQuestionText(${questionIndex}, this.value)" required></textarea>
              <div class="field-error question-text-error"></div>
            </div>
            <div class="options-container">
              <label style="margin-bottom: 12px; font-weight: 600; color: #333; font-size: 14px;">Answer Options <span style="color: #ef4444;">*</span></label>
              <div class="options-list">
                <!-- Options will be added here -->
              </div>
              <button type="button" class="btn-add-option" onclick="addNewOption(${questionIndex})" 
                      style="margin-top: 10px; padding: 6px 12px; background: #6b7280; color: white; border: none; border-radius: 4px; font-size: 12px;">
                + Add Option
              </button>
            </div>
            <div class="form-group">
              <label for="correct-answer-${questionIndex}">Correct Answer <span style="color: #ef4444;">*</span></label>
              <select class="correct-answer-select" id="correct-answer-${questionIndex}" 
                onchange="setCorrectAnswer(${questionIndex}, this.value)">
                <option value="">Select correct answer</option>
              </select>
              <div class="field-error correct-answer-error"></div>
            </div>
            <div class="error-message" id="error-message-${questionIndex}">
              Please complete all required fields for this question.
            </div>
          `;

          questionsContainer.appendChild(questionCard);

          const optionsContainer = questionCard.querySelector(".options-list");
          const correctAnswerSelect = questionCard.querySelector(`#correct-answer-${questionIndex}`);

          if (!questionData) {
            questions[questionIndex] = {
              questionText: "",
              options: ["", ""], // Initialize with 2 empty options
              correctAnswer: "",
              marks: 1,
            };
            for (let i = 0; i < 2; i++) {
              addOptionToDOM(optionsContainer, questionIndex, i, "", correctAnswerSelect);
            }
          } else {
            questionData.options.forEach((option, optionIndex) => {
              addOptionToDOM(optionsContainer, questionIndex, optionIndex, option, correctAnswerSelect);
            });
            // Set the correct answer in the dropdown
            const correctOptionIndex = questionData.options.indexOf(correctAnswer);
            if (correctOptionIndex !== -1) {
              const correctAlphabet = String.fromCharCode(65 + correctOptionIndex);
              correctAnswerSelect.value = correctAlphabet;
            }
            
            // Run validation on existing data
            setTimeout(() => {
              validateQuestionText(questionIndex, questionData.questionText);
              questionData.options.forEach((option, optionIndex) => {
                validateOption(questionIndex, optionIndex, option);
              });
              validateCorrectAnswer(questionIndex);
            }, 100);
          }

          updateQuestionsJson();
          updateQuestionStatus(questionIndex);

          // Add real-time validation for question text
          const questionTextInput = questionCard.querySelector('.question-text');
          questionTextInput.addEventListener('blur', function() {
            validateQuestionText(questionIndex, this.value);
          });

          // Add real-time validation for correct answer select
          const correctAnswerSelectEl = questionCard.querySelector('.correct-answer-select');
          correctAnswerSelectEl.addEventListener('change', function() {
            validateCorrectAnswer(questionIndex);
          });
        }

        function addOptionToDOM(container, questionIndex, optionIndex, optionText = "", correctAnswerSelect) {
          const optionGroup = document.createElement("div");
          optionGroup.className = "option-group";
          optionGroup.dataset.optionIndex = optionIndex;
          optionGroup.style.animation = 'fadeIn 0.3s ease-in';

          const optionLabel = String.fromCharCode(65 + optionIndex);

          optionGroup.innerHTML = `
            <div style="display: flex; align-items: flex-start; gap: 12px; width: 100%;">
              <span class="option-label" style="margin-top: 12px;">${optionLabel}</span>
              <div style="flex: 1;">
                <input type="text" class="option-input" value="${optionText}" 
                  placeholder="Option ${optionLabel} (minimum 2 characters)" 
                  oninput="updateOptionText(${questionIndex}, ${optionIndex}, this.value)" required>
                <div class="field-error option-error"></div>
              </div>
              <button type="button" class="delete-option" onclick="removeOption(${questionIndex}, ${optionIndex})"
                      style="background: #ef4444; color: white; border: none; border-radius: 4px; width: 24px; height: 24px; cursor: pointer; margin-top: 12px; ${questions[questionIndex] && questions[questionIndex].options && questions[questionIndex].options.length <= 2 ? 'display: none;' : ''}">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>
          `;

          container.appendChild(optionGroup);

          // Add option to the correct answer dropdown
          const optionElement = document.createElement("option");
          optionElement.value = optionLabel;
          optionElement.textContent = `Option ${optionLabel}`;
          correctAnswerSelect.appendChild(optionElement);

          // Ensure options array is properly sized and initialized
          if (!Array.isArray(questions[questionIndex].options)) {
            questions[questionIndex].options = [];
          }
          
          questions[questionIndex].options[optionIndex] = optionText || "";
          
          // Add real-time validation for option input
          const optionInput = optionGroup.querySelector('.option-input');
          optionInput.addEventListener('blur', function() {
            validateOption(questionIndex, optionIndex, this.value);
          });
          
          updateQuestionsJson();
        }

        function updateQuestionStatus(questionIndex) {
          const questionCard = document.querySelector(`.question-card[data-index="${questionIndex}"]`);
          if (!questionCard) return;

          const statusElement = questionCard.querySelector('.status-text');
          const question = questions[questionIndex];
          
          const hasQuestionText = question.questionText && question.questionText.trim().length >= 10;
          const hasMinOptions = question.options.filter(opt => opt && opt.trim().length >= 2).length >= 2;
          const hasCorrectAnswer = question.correctAnswer && question.correctAnswer.trim() !== '';

          if (hasQuestionText && hasMinOptions && hasCorrectAnswer) {
            statusElement.textContent = 'Complete';
            statusElement.parentNode.style.cssText = 'padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: 500; background: #dcfce7; color: #166534;';
          } else {
            statusElement.textContent = 'Incomplete';
            statusElement.parentNode.style.cssText = 'padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: 500; background: #fef3c7; color: #92400e;';
          }
        }

        // Initialize with one question
        createQuestionCard(0);

        // Trigger initial validation for empty fields
        setTimeout(() => {
          validateSkillName();
          if (questions.length > 0) {
            validateQuestionText(0, '');
            validateOption(0, 0, '');
            validateOption(0, 1, '');
            validateCorrectAnswer(0);
          }
        }, 100);

        addQuestionBtn.addEventListener("click", function () {
          createQuestionCard(questions.length);
          // Scroll to the new question
          setTimeout(() => {
            const newQuestion = document.querySelector(`.question-card[data-index="${questions.length - 1}"]`);
            if (newQuestion) {
              newQuestion.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
          }, 100);
        });

        // Enhanced form submission with AJAX
        document.getElementById("quiz-form").addEventListener("submit", async function (e) {
          e.preventDefault();
          
          if (!validateCompleteForm()) {
            return;
          }

          // Show loading state
          const submitBtn = document.querySelector('.btn-submit');
          const originalText = submitBtn.textContent;
          submitBtn.textContent = 'Creating Quiz...';
          submitBtn.disabled = true;

          try {
            const formData = new FormData(this);
            const response = await fetch('/adminD/quizzes/add', {
              method: 'POST',
              body: formData
            });

            if (response.ok) {
              showNotification('Quiz created successfully!', 'success');
              setTimeout(() => {
                window.location.href = '/adminD/quizzes';
              }, 1500);
            } else {
              const error = await response.text();
              throw new Error(error || 'Failed to create quiz');
            }

          } catch (error) {
            console.error('Error creating quiz:', error);
            showNotification('Failed to create quiz. Please try again.', 'error');
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
          }
        });

        function validateCompleteForm() {
          let isValid = true;

          // Validate skill name
          if (!validateSkillName()) {
            skillNameInput.focus();
            isValid = false;
          }

          // Validate all questions
          for (let i = 0; i < questions.length; i++) {
            const question = questions[i];

            // Validate question text
            const questionTextValid = validateQuestionText(i, question.questionText);
            if (!questionTextValid) {
              isValid = false;
            }

            // Validate options
            let validOptionsCount = 0;
            for (let j = 0; j < question.options.length; j++) {
              if (validateOption(i, j, question.options[j])) {
                validOptionsCount++;
              } else {
                isValid = false;
              }
            }

            if (validOptionsCount < 2) {
              showNotification(`Question ${i + 1} must have at least 2 valid options`, 'error');
              isValid = false;
            }

            // Validate correct answer
            if (!validateCorrectAnswer(i)) {
              isValid = false;
            }
          }

          if (isValid) {
            updateQuestionsJson();
          }
          
          return isValid;
        }

        function showNotification(message, type = 'info') {
          const existingNotification = document.querySelector('.notification');
          if (existingNotification) {
            existingNotification.remove();
          }

          const notification = document.createElement('div');
          notification.className = 'notification';
          notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 1000;
            padding: 15px 20px; border-radius: 8px; color: white; font-weight: 500;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#2563eb'};
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            animation: slideIn 0.3s ease-out; max-width: 300px;
          `;
          notification.textContent = message;

          document.body.appendChild(notification);

          setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => notification.remove(), 300);
          }, 3000);
        }

        // Make functions globally available
        window.updateQuestionText = function(questionIndex, value) {
          questions[questionIndex].questionText = value.trim();
          validateQuestionText(questionIndex, value);
          updateQuestionsJson();
          updateQuestionStatus(questionIndex);
        };

        window.updateQuestionMarks = function(questionIndex, value) {
          const marks = Math.max(1, Math.min(10, parseInt(value) || 1));
          questions[questionIndex].marks = marks;
          document.querySelector(`.question-card[data-index="${questionIndex}"] .marks-input`).value = marks;
          updateQuestionsJson();
        };

        window.updateOptionText = function(questionIndex, optionIndex, value) {
          const trimmedValue = value.trim();
          const previousValue = questions[questionIndex].options[optionIndex];
          questions[questionIndex].options[optionIndex] = trimmedValue;
          
          // Validate the option
          validateOption(questionIndex, optionIndex, value);
          
          if (questions[questionIndex].correctAnswer === previousValue) {
            questions[questionIndex].correctAnswer = trimmedValue;
          }
          
          updateQuestionsJson();
          updateQuestionStatus(questionIndex);
        };

        window.setCorrectAnswer = function(questionIndex, alphabet) {
          if (!alphabet) {
            questions[questionIndex].correctAnswer = "";
            validateCorrectAnswer(questionIndex);
            updateQuestionsJson();
            updateQuestionStatus(questionIndex);
            return;
          }

          const optionIndex = alphabet.charCodeAt(0) - 65;
          const optionValue = questions[questionIndex].options[optionIndex];

          if (!optionValue || !optionValue.trim()) {
            showNotification("Please fill in the option before selecting it as the correct answer.", 'error');
            const select = document.getElementById(`correct-answer-${questionIndex}`);
            if (select) select.value = "";
            questions[questionIndex].correctAnswer = "";
          } else {
            questions[questionIndex].correctAnswer = optionValue.trim();
          }
          
          validateCorrectAnswer(questionIndex);
          updateQuestionsJson();
          updateQuestionStatus(questionIndex);
        };

        window.addNewOption = function(questionIndex) {
          const questionCard = document.querySelector(`.question-card[data-index="${questionIndex}"]`);
          const optionsContainer = questionCard.querySelector('.options-list');
          const correctAnswerSelect = questionCard.querySelector(`#correct-answer-${questionIndex}`);
          
          const newOptionIndex = questions[questionIndex].options.length;
          questions[questionIndex].options.push("");
          
          addOptionToDOM(optionsContainer, questionIndex, newOptionIndex, "", correctAnswerSelect);
          
          // Update delete button visibility
          const deleteButtons = optionsContainer.querySelectorAll('.delete-option');
          deleteButtons.forEach(btn => {
            btn.style.display = questions[questionIndex].options.length > 2 ? 'block' : 'none';
          });
          
          updateQuestionsJson();
        };

        window.removeOption = function(questionIndex, optionIndex) {
          if (questions[questionIndex].options.length <= 2) {
            showNotification("A question must have at least 2 options", 'error');
            return;
          }

          const removedOption = questions[questionIndex].options[optionIndex];
          questions[questionIndex].options.splice(optionIndex, 1);
          
          if (questions[questionIndex].correctAnswer === removedOption) {
            questions[questionIndex].correctAnswer = "";
            const select = document.getElementById(`correct-answer-${questionIndex}`);
            if (select) select.value = "";
          }

          // Rebuild the question card to update indices
          const questionCard = document.querySelector(`.question-card[data-index="${questionIndex}"]`);
          const questionText = questionCard.querySelector('.question-text').value;
          const marks = questionCard.querySelector('.marks-input').value;
          
          // Store current values
          const currentQuestion = {
            questionText: questionText,
            options: questions[questionIndex].options,
            correctAnswer: questions[questionIndex].correctAnswer,
            marks: parseInt(marks) || 1
          };

          // Remove and recreate
          questionCard.remove();
          createQuestionCard(questionIndex, currentQuestion);
          
          updateQuestionsJson();
          updateQuestionStatus(questionIndex);
        };

        window.deleteQuestion = function(questionIndex) {
          if (questions.length <= 1) {
            showNotification("A quiz must have at least one question", 'error');
            return;
          }

          if (confirm("Are you sure you want to delete this question?")) {
            const questionCard = document.querySelector(`.question-card[data-index="${questionIndex}"]`);
            questionCard.style.animation = 'fadeOut 0.3s ease-out';
            
            setTimeout(() => {
              questionCard.remove();
              questions.splice(questionIndex, 1);

              // Update remaining question indices
              const remainingCards = document.querySelectorAll(".question-card");
              remainingCards.forEach((card, index) => {
                card.dataset.index = index;
                card.querySelector("h4").textContent = `Question ${index + 1}`;
                updateQuestionCardEvents(card, index);
              });

              updateQuestionsJson();
            }, 300);
          }
        };

        function updateQuestionCardEvents(card, index) {
          const deleteBtn = card.querySelector(".delete-question");
          deleteBtn.setAttribute("onclick", `deleteQuestion(${index})`);
          deleteBtn.disabled = questions.length <= 1;

          const questionTextInput = card.querySelector(".question-text");
          questionTextInput.setAttribute("oninput", `updateQuestionText(${index}, this.value)`);

          const marksInput = card.querySelector(".marks-input");
          marksInput.setAttribute("oninput", `updateQuestionMarks(${index}, this.value)`);

          const optionInputs = card.querySelectorAll(".option-input");
          optionInputs.forEach((input, optionIndex) => {
            input.setAttribute("oninput", `updateOptionText(${index}, ${optionIndex}, this.value)`);
          });

          const correctAnswerSelect = card.querySelector(".correct-answer-select");
          correctAnswerSelect.id = `correct-answer-${index}`;
          correctAnswerSelect.setAttribute("onchange", `setCorrectAnswer(${index}, this.value)`);

          const errorMessage = card.querySelector(".error-message");
          errorMessage.id = `error-message-${index}`;

          const addOptionBtn = card.querySelector(".btn-add-option");
          addOptionBtn.setAttribute("onclick", `addNewOption(${index})`);

          const deleteOptionBtns = card.querySelectorAll(".delete-option");
          deleteOptionBtns.forEach((btn, optionIndex) => {
            btn.setAttribute("onclick", `removeOption(${index}, ${optionIndex})`);
          });
        }

        // Add CSS animations
        const style = document.createElement('style');
        style.textContent = `
          @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
          }
          @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(-10px); }
          }
          @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
          }
          @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
          }
        `;
        document.head.appendChild(style);
      });
    </script>
  </body>
</html>