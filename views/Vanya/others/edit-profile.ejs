<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Edit Freelancer Profile</title>
    <link rel="stylesheet" href="/css/FreelancerD/profile.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
      .image-preview {
        margin-top: 15px;
        padding: 20px;
        border: 2px dashed #ddd;
        border-radius: 8px;
        text-align: center;
        background-color: #fafafa;
        transition: border-color 0.3s ease;
      }

      .image-preview:hover {
        border-color: #2563eb;
      }

      .image-preview img {
        max-width: 200px;
        max-height: 200px;
        border-radius: 50%;
        object-fit: cover;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      .preview-placeholder {
        padding: 40px 20px;
        color: #666;
      }

      .preview-placeholder i {
        font-size: 48px;
        margin-bottom: 10px;
        color: #ccc;
      }

      .preview-placeholder p {
        margin: 0;
        font-size: 14px;
      }

      .preview-label {
        margin-top: 10px;
        font-size: 12px;
        color: #666;
        font-weight: 500;
      }

      .image-preview.has-image {
        border-color: #10b981;
        background-color: #f0fdf4;
      }

      .error-message {
        color: #dc2626;
        font-size: 12px;
        margin-top: 4px;
        font-weight: 500;
        display: none;
      }

      .success-message {
        color: #10b981;
        font-size: 12px;
        margin-top: 4px;
        font-weight: 500;
        display: none;
      }

      .form-group input.error,
      .form-group textarea.error {
        border-color: #dc2626 !important;
        box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1) !important;
      }

      .form-group input.valid,
      .form-group textarea.valid {
        border-color: #10b981 !important;
        box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1) !important;
      }

      .form-group {
        position: relative;
      }

      .validation-container {
        min-height: 16px;
        margin-top: 4px;
      }

      .portfolio-preview {
        margin-top: 10px;
        padding: 15px;
        border: 2px dashed #ddd;
        border-radius: 8px;
        text-align: center;
        background-color: #fafafa;
        transition: border-color 0.3s ease;
      }

      .portfolio-preview:hover {
        border-color: #2563eb;
      }

      .portfolio-preview img {
        max-width: 150px;
        max-height: 150px;
        border-radius: 8px;
        object-fit: cover;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .portfolio-preview.has-image {
        border-color: #10b981;
        background-color: #f0fdf4;
      }


    </style>
  </head>
  <body>
    <div class="dashboard-wrapper">
      <!-- Sidebar -->
      <%- include('../partials/sidebar', {activePage: 'profile', user: user}) %>
      <div class="main-content">
        <div class="container">
          <div class="header">
            <h1>Edit Freelancer Profile</h1>
            <a href="/freelancerD/profile" class="back-button">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <line x1="19" y1="12" x2="5" y2="12"></line>
                <polyline points="12 19 5 12 12 5"></polyline>
              </svg>
              Back to Profile
            </a>
          </div>

          <div class="edit-form-container">
            <form id="profileEditForm" action="/freelancerD/profile/update" method="POST" enctype="multipart/form-data" novalidate>
              <div class="form-section">
                <h3 class="form-section-title">Basic Information</h3>

                <div class="form-row">
                  <div class="form-group">
                    <label for="name">Name *</label>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      value="<%= user.name || '' %>"
                      placeholder="Enter your full name"
                    />
                    <div class="validation-container">
                      <div id="nameError" class="error-message"></div>
                    </div>
                  </div>
                </div>

                <div class="form-row">
                  <div class="form-group">
                    <label for="title">Title *</label>
                    <input
                      type="text"
                      id="title"
                      name="title"
                      value="<%= user.role || '' %>"
                      placeholder="e.g., Web Developer, Graphic Designer"
                      readonly
                      style="background-color: #f5f5f5; cursor: not-allowed;"
                    />
                    <div class="validation-container">
                      <div id="titleError" class="error-message"></div>
                    </div>
                  </div>
                </div>

                <div class="form-row">
                  <div class="form-group">
                    <label for="location">Location</label>
                    <input
                      type="text"
                      id="location"
                      name="location"
                      value="<%= user.location || '' %>"
                      placeholder="e.g., New York, USA"
                    />
                    <div class="validation-container">
                      <div id="locationError" class="error-message"></div>
                    </div>
                  </div>
                </div>

                <div class="form-row">
                  <div class="form-group">
                    <label for="profileImage">Profile Image</label>
                    <input
                      type="file"
                      id="profileImage"
                      name="profileImage"
                      accept="image/*"
                      onchange="previewImage(this)"
                    />
                    <small class="field-note"
                      >Upload your profile image (JPG, PNG, GIF, WebP - Max 5MB)</small
                    >
                    <!-- Image Preview -->
                    <div id="imagePreview" class="image-preview">
                      <% if (user.picture && user.picture !== '') { %>
                        <img src="<%= user.picture %>" alt="Current Profile Image" id="previewImg">
                        <p class="preview-label">Current Profile Image</p>
                      <% } else { %>
                        <div class="preview-placeholder" id="previewPlaceholder">
                          <i class="fas fa-user-circle"></i>
                          <p>No image selected</p>
                        </div>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-section">
                <h3 class="form-section-title">Contact Information</h3>

                <div class="form-row">
                  <div class="form-group">
                    <label for="email">Email *</label>
                    <input
                      type="text"
                      id="email"
                      name="email"
                      value="<%= user.email || '' %>"
                      placeholder="Enter your email address"
                      readonly
                      style="background-color: #f5f5f5; cursor: not-allowed;"
                    />
                    <div class="validation-container">
                      <div id="emailError" class="error-message"></div>
                    </div>
                  </div>
                </div>

                <div class="form-row">
                  <div class="form-group">
                    <label for="phone">Phone</label>
                    <input
                      type="tel"
                      id="phone"
                      name="phone"
                      value="<%= user.phone || '' %>"
                      maxlength="10"
                      placeholder="Enter your 10-digit phone number"
                    />
                    <div id="phoneError" class="error-message" style="display: none;"></div>
                  </div>
                </div>
              </div>

              <div class="form-section">
                <h3 class="form-section-title">About Me</h3>

                <div class="form-row">
                  <div class="form-group">
                    <label for="about">About *</label>
                    <textarea 
                      id="about" 
                      name="about" 
                      rows="6"
                      placeholder="Tell us about yourself, your skills, and experience..."
                    ><%= user.aboutMe || '' %></textarea>
                    <small class="field-note"
                      >Minimum 50 characters. Separate paragraphs with a blank line</small
                    >
                    <div class="validation-container">
                      <div id="aboutError" class="error-message"></div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-section">
                <h3 class="form-section-title">Experience</h3>

                <div class="form-row">
                  <div class="form-group">
                    <label>Experience</label>
                    <div id="experienceContainer" class="experience-container">
                      <% (user.experience || []).forEach((exp, index) => { %>
                        <div class="experience-item" data-index="<%= index %>">
                          <input
                            type="text"
                            class="experience-title"
                            name="experience[<%= index %>][title]"
                            value="<%= exp.title || '' %>"
                            placeholder="Title"
                          />
                          <input
                            type="text"
                            class="experience-date"
                            name="experience[<%= index %>][date]"
                            value="<%= exp.date || '' %>"
                            placeholder="Date"
                          />
                          <textarea
                            class="experience-description"
                            name="experience[<%= index %>][description]"
                            rows="3"
                            placeholder="Description"
                          ><%= exp.description || '' %></textarea>
                          <button
                            type="button"
                            class="remove-btn"
                            onclick="removeItem(this, 'experience')"
                          >Remove</button>
                        </div>
                      <% }) %>
                      <button
                        type="button"
                        id="addExperienceBtn"
                        class="add-btn"
                      >
                        Add Experience
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-section">
                <h3 class="form-section-title">Education</h3>

                <div class="form-row">
                  <div class="form-group">
                    <label>Education</label>
                    <div id="educationContainer" class="education-container">
                      <% (user.education || []).forEach((edu, index) => { %>
                        <div class="education-item" data-index="<%= index %>">
                          <input
                            type="text"
                            class="education-title"
                            name="education[<%= index %>][degree]"
                            value="<%= edu.degree || '' %>"
                            placeholder="Degree"
                          />
                          <input
                            type="text"
                            class="education-institution"
                            name="education[<%= index %>][institution]"
                            value="<%= edu.institution || '' %>"
                            placeholder="Institution"
                          />
                          <input
                            type="text"
                            class="education-date"
                            name="education[<%= index %>][date]"
                            value="<%= edu.date || '' %>"
                            placeholder="Date"
                          />
                          <button
                            type="button"
                            class="remove-btn"
                            onclick="removeItem(this, 'education')"
                          >Remove</button>
                        </div>
                      <% }) %>
                      <button
                        type="button"
                        id="addEducationBtn"
                        class="add-btn"
                      >
                        Add Education
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-section">
                <h3 class="form-section-title">Portfolio</h3>

                <div class="form-row">
                  <div class="form-group">
                    <label>Portfolio</label>
                    <div id="portfolioContainer" class="portfolio-container">
                      <% (user.portfolio || []).forEach((port, index) => { %>
                        <div class="portfolio-item" data-index="<%= index %>">
                          <label for="portfolioImage<%= index %>">Portfolio Image</label>
                          <input
                            type="file"
                            id="portfolioImage<%= index %>"
                            class="portfolio-image-file"
                            name="portfolioImages"
                            accept="image/*"
                            onchange="previewPortfolioImage(this, '<%= index %>')"
                          />
                          <small class="field-note">Upload portfolio image (JPG, PNG, GIF, WebP - Max 5MB)</small>
                          <div id="portfolioPreview<%= index %>" class="portfolio-preview">
                            <% if (port.image && port.image !== '') { %>
                              <img src="<%= port.image %>" alt="Portfolio Image" id="portfolioPreviewImg<%= index %>">
                              <p class="preview-label">Current Portfolio Image</p>
                            <% } else { %>
                              <div class="preview-placeholder" id="portfolioPreviewPlaceholder<%= index %>">
                                <i class="fas fa-image"></i>
                                <p>No image selected</p>
                              </div>
                            <% } %>
                          </div>
                          <input
                            type="text"
                            class="portfolio-title"
                            name="portfolio[<%= index %>][title]"
                            value="<%= port.title || '' %>"
                            placeholder="Title"
                          />
                          <textarea
                            class="portfolio-description"
                            name="portfolio[<%= index %>][description]"
                            rows="3"
                            placeholder="Description"
                          ><%= port.description || '' %></textarea>
                          <input
                            type="text"
                            class="portfolio-link"
                            name="portfolio[<%= index %>][link]"
                            value="<%= port.link || '' %>"
                            placeholder="Project Link (Optional)"
                          />
                          <button
                            type="button"
                            class="remove-btn"
                            onclick="removeItem(this, 'portfolio')"
                          >Remove</button>
                        </div>
                      <% }) %>
                      <button
                        type="button"
                        id="addPortfolioBtn"
                        class="add-btn"
                      >
                        Add Portfolio Item
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-section">
                <h3 class="form-section-title">Resume</h3>

                <div class="form-row">
                  <div class="form-group">
                    <label for="resumeLink">Resume Link</label>
                    <input
                      type="text"
                      id="resumeLink"
                      name="resumeLink"
                      value="<%= user.resume || '' %>"
                      placeholder="https://example.com/resume.pdf"
                    />
                    <small class="field-note"
                      >Enter a direct link to your resume (e.g.,
                      https://example.com/resume.pdf)</small
                    >
                    <div class="validation-container">
                      <div id="resumeLinkError" class="error-message"></div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-actions">
                <a href="/freelancerD/profile" class="cancel-button">Cancel</a>
                <button type="submit" class="save-button">Save Changes</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Image Preview Function
      function previewImage(input) {
        const preview = document.getElementById('imagePreview');
        const previewImg = document.getElementById('previewImg');
        const previewPlaceholder = document.getElementById('previewPlaceholder');
        
        if (input.files && input.files[0]) {
          const reader = new FileReader();
          
          reader.onload = function(e) {
            // Remove placeholder if it exists
            if (previewPlaceholder) {
              previewPlaceholder.remove();
            }
            
            // Create or update image element
            if (previewImg) {
              previewImg.src = e.target.result;
            } else {
              const img = document.createElement('img');
              img.src = e.target.result;
              img.alt = 'Profile Image Preview';
              img.id = 'previewImg';
              
              const label = document.createElement('p');
              label.className = 'preview-label';
              label.textContent = 'New Profile Image';
              
              preview.innerHTML = '';
              preview.appendChild(img);
              preview.appendChild(label);
            }
            
            // Update preview container styling
            preview.classList.add('has-image');
            
            // Update label for existing image
            const existingLabel = preview.querySelector('.preview-label');
            if (existingLabel) {
              existingLabel.textContent = 'New Profile Image';
            }
          };
          
          reader.readAsDataURL(input.files[0]);
        }
      }

      // Portfolio Image Preview Function
      function previewPortfolioImage(input, index) {
        const preview = document.getElementById(`portfolioPreview${index}`);
        const previewImg = document.getElementById(`portfolioPreviewImg${index}`);
        const previewPlaceholder = document.getElementById(`portfolioPreviewPlaceholder${index}`);
        
        if (input.files && input.files[0]) {
          const reader = new FileReader();
          
          reader.onload = function(e) {
            // Remove placeholder if it exists
            if (previewPlaceholder) {
              previewPlaceholder.remove();
            }
            
            // Create or update image element
            if (previewImg) {
              previewImg.src = e.target.result;
            } else {
              const img = document.createElement('img');
              img.src = e.target.result;
              img.alt = 'Portfolio Image Preview';
              img.id = `portfolioPreviewImg${index}`;
              
              const label = document.createElement('p');
              label.className = 'preview-label';
              label.textContent = 'New Portfolio Image';
              
              preview.innerHTML = '';
              preview.appendChild(img);
              preview.appendChild(label);
            }
            
            // Update preview container styling
            preview.classList.add('has-image');
            
            // Update label for existing image
            const existingLabel = preview.querySelector('.preview-label');
            if (existingLabel) {
              existingLabel.textContent = 'New Portfolio Image';
            }
          };
          
          reader.readAsDataURL(input.files[0]);
        }
      }

      // Validation Functions
      function validateName(name) {
        const trimmed = name.trim();
        if (!trimmed) return 'Name is required';
        if (trimmed.length < 2) return 'Name must be at least 2 characters';
        if (trimmed.length > 50) return 'Name must be less than 50 characters';
        if (!/^[a-zA-Z\s'-]+$/.test(trimmed)) return 'Name can only contain letters, spaces, hyphens, and apostrophes';
        return '';
      }

      function validateTitle(title) {
        const trimmed = title.trim();
        if (!trimmed) return 'Title is required';
        if (trimmed.length < 3) return 'Title must be at least 3 characters';
        if (trimmed.length > 100) return 'Title must be less than 100 characters';
        return '';
      }

      function validateEmail(email) {
        const trimmed = email.trim();
        if (!trimmed) return 'Email is required';
        const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailPattern.test(trimmed)) return 'Please enter a valid email address';
        if (trimmed.length > 254) return 'Email address is too long';
        return '';
      }

      function validatePhoneNumber(phoneNumber) {
        const trimmed = phoneNumber.trim();
        if (!trimmed) return ''; // Phone is optional
        
        // Phone validation for 10 digits only
        const digitsOnlyPattern = /^\d{10}$/; // Exactly 10 digits
        
        // Check if it's exactly 10 digits
        if (!digitsOnlyPattern.test(trimmed)) {
          return 'Phone number must be exactly 10 digits';
        }
        
        // Check if it starts with a valid digit (not 0 or 1)
        if (trimmed[0] === '0' || trimmed[0] === '1') {
          return 'Phone number cannot start with 0 or 1';
        }
        
        return '';
      }

      function validateLocation(location) {
        const trimmed = location.trim();
        if (!trimmed) return ''; // Location is optional
        if (trimmed.length < 2) return 'Location must be at least 2 characters';
        if (trimmed.length > 100) return 'Location must be less than 100 characters';
        return '';
      }

      function validateAbout(about) {
        const trimmed = about.trim();
        if (!trimmed) return 'About section is required';
        if (trimmed.length < 50) return 'About section must be at least 50 characters';
        if (trimmed.length > 2000) return 'About section must be less than 2000 characters';
        return '';
      }

      function validateResumeLink(resumeLink) {
        const trimmed = resumeLink.trim();
        if (!trimmed) return ''; // Resume link is optional
        
        try {
          const url = new URL(trimmed);
          if (!['http:', 'https:'].includes(url.protocol)) {
            return 'Resume link must be a valid HTTP or HTTPS URL';
          }
          return '';
        } catch (e) {
          return 'Please enter a valid URL (e.g., https://example.com/resume.pdf)';
        }
      }

      function validatePortfolioLink(linkInput) {
        const trimmed = linkInput.value.trim();
        if (!trimmed) {
          linkInput.classList.remove('error', 'valid');
          return '';
        }
        
        try {
          const url = new URL(trimmed);
          if (!['http:', 'https:'].includes(url.protocol)) {
            linkInput.classList.add('error');
            linkInput.classList.remove('valid');
            return 'Portfolio link must be a valid HTTP or HTTPS URL';
          } else {
            linkInput.classList.remove('error');
            linkInput.classList.add('valid');
            return '';
          }
        } catch (e) {
          linkInput.classList.add('error');
          linkInput.classList.remove('valid');
          return 'Please enter a valid URL';
        }
      }

      // Generic error display function with DOM manipulation
      function displayFieldError(fieldId, message) {
        const errorDiv = document.getElementById(`${fieldId}Error`);
        const fieldInput = document.getElementById(fieldId);
        
        console.log(`displayFieldError called - Field: ${fieldId}, Message: ${message}, ErrorDiv found: ${!!errorDiv}, FieldInput found: ${!!fieldInput}`); // Debug log
        
        if (!errorDiv || !fieldInput) {
          console.error(`Missing elements for field ${fieldId}:`, { errorDiv: !!errorDiv, fieldInput: !!fieldInput });
          return;
        }
        
        if (message) {
          // Show error using DOM manipulation
          errorDiv.textContent = message;
          errorDiv.style.display = 'block';
          errorDiv.style.color = '#dc2626';
          errorDiv.style.fontSize = '12px';
          errorDiv.style.marginTop = '4px';
          errorDiv.style.fontWeight = '500';
          
          // Add error styling to input
          fieldInput.classList.add('error');
          fieldInput.classList.remove('valid');
          fieldInput.style.borderColor = '#dc2626';
          fieldInput.style.boxShadow = '0 0 0 3px rgba(220, 38, 38, 0.1)';
        } else {
          // Hide error using DOM manipulation
          errorDiv.style.display = 'none';
          errorDiv.textContent = '';
          
          // Remove error styling and add valid styling if field has value
          fieldInput.classList.remove('error');
          fieldInput.style.borderColor = '';
          fieldInput.style.boxShadow = '';
          
          if (fieldInput.value.trim()) {
            fieldInput.classList.add('valid');
            fieldInput.style.borderColor = '#10b981';
            fieldInput.style.boxShadow = '0 0 0 3px rgba(16, 185, 129, 0.1)';
          } else {
            fieldInput.classList.remove('valid');
          }
        }
      }

      // Legacy function for phone validation
      function displayPhoneError(message) {
        displayFieldError('phone', message);
      }

      // Real-time validation for all fields
      document.getElementById('name').addEventListener('input', function(e) {
        const error = validateName(e.target.value);
        displayFieldError('name', error);
      });

      // Title and email fields are read-only, no real-time validation needed

      document.getElementById('phone').addEventListener('input', function(e) {
        const error = validatePhoneNumber(e.target.value);
        displayFieldError('phone', error);
        console.log('Phone validation - Input:', e.target.value, 'Error:', error); // Debug log
      });

      // Also validate on blur (when user leaves the field)
      document.getElementById('phone').addEventListener('blur', function(e) {
        const error = validatePhoneNumber(e.target.value);
        displayFieldError('phone', error);
        console.log('Phone validation - Blur:', e.target.value, 'Error:', error); // Debug log
      });

      document.getElementById('location').addEventListener('input', function(e) {
        const error = validateLocation(e.target.value);
        displayFieldError('location', error);
      });

      document.getElementById('about').addEventListener('input', function(e) {
        const error = validateAbout(e.target.value);
        displayFieldError('about', error);
      });

      document.getElementById('resumeLink').addEventListener('input', function(e) {
        const error = validateResumeLink(e.target.value);
        displayFieldError('resumeLink', error);
      });

      // Initialize validation for existing portfolio links
      document.addEventListener('DOMContentLoaded', function() {
        const portfolioLinks = document.querySelectorAll('.portfolio-link');
        portfolioLinks.forEach(linkInput => {
          linkInput.addEventListener('input', function(e) {
            validatePortfolioLink(e.target);
          });
        });
      });

      // Phone number validation (10 digits only, no formatting)
      document.getElementById('phone').addEventListener('keyup', function(e) {
        let value = e.target.value.replace(/\D/g, ''); // Remove non-digits
        
        // Limit to 10 digits maximum
        if (value.length > 10) {
          value = value.slice(0, 10);
        }
        
        e.target.value = value;
        
        // Trigger validation after formatting
        const error = validatePhoneNumber(e.target.value);
        displayFieldError('phone', error);
        console.log('Phone validation - Value:', value, 'Error:', error); // Debug log
      });

      // Add Experience
      document.getElementById('addExperienceBtn').addEventListener('click', () => {
        const container = document.getElementById('experienceContainer');
        const index = container.querySelectorAll('.experience-item').length;
        const item = document.createElement('div');
        item.className = 'experience-item';
        item.setAttribute('data-index', index);
        item.innerHTML = `
          <input type="text" class="experience-title" name="experience[${index}][title]" placeholder="Title" />
          <input type="text" class="experience-date" name="experience[${index}][date]" placeholder="Date" />
          <textarea class="experience-description" name="experience[${index}][description]" rows="3" placeholder="Description"></textarea>
          <button type="button" class="remove-btn" onclick="removeItem(this, 'experience')">Remove</button>
        `;
        container.insertBefore(item, document.getElementById('addExperienceBtn'));
      });

      // Add Education
      document.getElementById('addEducationBtn').addEventListener('click', () => {
        const container = document.getElementById('educationContainer');
        const index = container.querySelectorAll('.education-item').length;
        const item = document.createElement('div');
        item.className = 'education-item';
        item.setAttribute('data-index', index);
        item.innerHTML = `
          <input type="text" class="education-title" name="education[${index}][degree]" placeholder="Degree" />
          <input type="text" class="education-institution" name="education[${index}][institution]" placeholder="Institution" />
          <input type="text" class="education-date" name="education[${index}][date]" placeholder="Date" />
          <button type="button" class="remove-btn" onclick="removeItem(this, 'education')">Remove</button>
        `;
        container.insertBefore(item, document.getElementById('addEducationBtn'));
      });

      // Add Portfolio
      document.getElementById('addPortfolioBtn').addEventListener('click', () => {
        const container = document.getElementById('portfolioContainer');
        const index = container.querySelectorAll('.portfolio-item').length;
        const item = document.createElement('div');
        item.className = 'portfolio-item';
        item.setAttribute('data-index', index);
        item.innerHTML = `
          <label for="portfolioImage${index}">Portfolio Image</label>
          <input type="file" id="portfolioImage${index}" class="portfolio-image-file" name="portfolioImages" accept="image/*" onchange="previewPortfolioImage(this, '${index}')" />
          <small class="field-note">Upload portfolio image (JPG, PNG, GIF, WebP - Max 5MB)</small>
          <div id="portfolioPreview${index}" class="portfolio-preview">
            <div class="preview-placeholder" id="portfolioPreviewPlaceholder${index}">
              <i class="fas fa-image"></i>
              <p>No image selected</p>
            </div>
          </div>
          <input type="text" class="portfolio-title" name="portfolio[${index}][title]" placeholder="Title" />
          <textarea class="portfolio-description" name="portfolio[${index}][description]" rows="3" placeholder="Description"></textarea>
          <input type="text" class="portfolio-link" name="portfolio[${index}][link]" placeholder="Project Link (Optional)" />
          <button type="button" class="remove-btn" onclick="removeItem(this, 'portfolio')">Remove</button>
        `;
        container.insertBefore(item, document.getElementById('addPortfolioBtn'));
        
        // Add validation to the new portfolio link field
        const linkInput = item.querySelector('.portfolio-link');
        linkInput.addEventListener('input', function(e) {
          validatePortfolioLink(e.target);
        });
      });

      // Remove Item
      function removeItem(button, type) {
        button.parentElement.remove();
        // Re-index items
        const container = document.getElementById(`${type}Container`);
        const items = container.querySelectorAll(`.${type}-item`);
        items.forEach((item, index) => {
          item.setAttribute('data-index', index);
          item.querySelectorAll('input, textarea').forEach(input => {
            const name = input.name.replace(/\[\d+\]/, `[${index}]`);
            input.name = name;
          });
        });
      }

      // Form validation function
      function validateForm() {
        let isValid = true;
        const errors = [];

        // Validate all fields
        const nameError = validateName(document.getElementById('name').value);
        if (nameError) {
          displayFieldError('name', nameError);
          errors.push('name');
          isValid = false;
        } else {
          displayFieldError('name', '');
        }

        // Title and email are read-only fields, skip validation

        const phoneError = validatePhoneNumber(document.getElementById('phone').value);
        if (phoneError) {
          displayFieldError('phone', phoneError);
          errors.push('phone');
          isValid = false;
        } else {
          displayFieldError('phone', '');
        }

        const locationError = validateLocation(document.getElementById('location').value);
        if (locationError) {
          displayFieldError('location', locationError);
          errors.push('location');
          isValid = false;
        } else {
          displayFieldError('location', '');
        }

        const aboutError = validateAbout(document.getElementById('about').value);
        if (aboutError) {
          displayFieldError('about', aboutError);
          errors.push('about');
          isValid = false;
        } else {
          displayFieldError('about', '');
        }

        const resumeLinkError = validateResumeLink(document.getElementById('resumeLink').value);
        if (resumeLinkError) {
          displayFieldError('resumeLink', resumeLinkError);
          errors.push('resumeLink');
          isValid = false;
        } else {
          displayFieldError('resumeLink', '');
        }

        // Focus on first error field
        if (!isValid && errors.length > 0) {
          document.getElementById(errors[0]).focus();
        }

        return isValid;
      }

      // Form Submission
      document.getElementById('profileEditForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;
        
        // Validate all fields before submission
        if (!validateForm()) {
          return;
        }
        
        const formData = new FormData(form);
        
        // Collect experience, education, and portfolio
        const experience = [];
        const education = [];
        const portfolio = [];

        form.querySelectorAll('.experience-item').forEach(item => {
          const title = item.querySelector('.experience-title').value;
          const date = item.querySelector('.experience-date').value;
          const description = item.querySelector('.experience-description').value;
          if (title || date || description) {
            experience.push({ title, date, description });
          }
        });

        form.querySelectorAll('.education-item').forEach(item => {
          const degree = item.querySelector('.education-title').value;
          const institution = item.querySelector('.education-institution').value;
          const date = item.querySelector('.education-date').value;
          if (degree || institution || date) {
            education.push({ degree, institution, date });
          }
        });

        form.querySelectorAll('.portfolio-item').forEach((item, index) => {
          const title = item.querySelector('.portfolio-title').value;
          const description = item.querySelector('.portfolio-description').value;
          const link = item.querySelector('.portfolio-link').value;
          
          // Get existing image URL from the preview img element
          const existingImageElement = item.querySelector(`#portfolioPreviewImg${index}`);
          const existingImage = existingImageElement ? existingImageElement.src : '';
          
          // Always include portfolio items (even if only image exists)
          // This ensures existing images are preserved
          if (title || description || link || existingImage) {
            portfolio.push({ 
              title: title || '', 
              description: description || '', 
              link: link || '', 
              image: existingImage || '', 
              index 
            });
          }
        });

        // Add structured data to FormData
        formData.append('experienceData', JSON.stringify(experience));
        formData.append('educationData', JSON.stringify(education));
        formData.append('portfolioData', JSON.stringify(portfolio));

        // Show loading state
        const submitButton = form.querySelector('.save-button');
        const originalText = submitButton.textContent;
        submitButton.textContent = 'Saving...';
        submitButton.disabled = true;

        try {
          const response = await fetch(form.action, {
            method: 'POST',
            body: formData, // Send FormData directly for file upload support
          });

          const result = await response.json();
          if (response.ok) {
            // Show success message
            const successDiv = document.createElement('div');
            successDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #10b981; color: white; padding: 15px 20px; border-radius: 8px; z-index: 1000; font-weight: 500;';
            successDiv.textContent = result.message || 'Profile updated successfully!';
            document.body.appendChild(successDiv);
            
            setTimeout(() => {
              window.location.href = '/freelancerD/profile';
            }, 1500);
          } else {
            throw new Error(result.error || 'Failed to update profile');
          }
        } catch (error) {
          console.error('Error submitting form:', error);
          
          // Show error message
          const errorDiv = document.createElement('div');
          errorDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #dc2626; color: white; padding: 15px 20px; border-radius: 8px; z-index: 1000; font-weight: 500;';
          errorDiv.textContent = error.message || 'Failed to update profile. Please try again.';
          document.body.appendChild(errorDiv);
          
          setTimeout(() => {
            document.body.removeChild(errorDiv);
          }, 5000);
        } finally {
          // Reset button state
          submitButton.textContent = originalText;
          submitButton.disabled = false;
        }
      });
    </script>
  </body>
</html>