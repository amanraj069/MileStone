<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Skills & Badges - Dashboard</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: #f8f9fa;
        color: #333;
      }

      .main-content {
        margin-left: 260px;
        padding: 30px;
        min-height: 100vh;
      }

      .page-header {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        border-left: 4px solid #2563eb;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
      }

      .page-header-content {
        flex: 1;
      }

      .page-title {
        font-size: 28px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
      }

      .page-subtitle {
        color: #666;
        font-size: 16px;
      }

      .content-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 30px;
        margin-bottom: 20px;
      }

      .skills-section,
      .badges-section {
        margin-bottom: 40px;
      }

      .section-title {
        font-size: 20px;
        color: #333;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #e1e5e9;
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .skills-list {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        margin-bottom: 25px;
      }

      .skill-tag {
        background: #2563eb;
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.3s ease;
      }

      .skill-tag:hover {
        transform: translateY(-1px);
        box-shadow: 0 3px 10px rgba(37, 99, 235, 0.3);
      }

      .add-skill {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        border-left: 4px solid #10b981;
      }

      .add-skill h5 {
        color: #10b981;
        margin-bottom: 15px;
        font-size: 16px;
      }

      .available-skills {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        max-width: 100%;
        gap: 20px;
      }

      @media (min-width: 1200px) {
        .available-skills {
          grid-template-columns: repeat(3, 1fr);
        }
      }

      .skill-item {
        background: white;
        padding: 25px;
        border-radius: 12px;
        text-align: center;
        border: 2px solid #e1e5e9;
        transition: all 0.3s ease;
        position: relative;
      }

      .skill-item:hover {
        border-color: #2563eb;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .skill-item.acquired {
        border-color: #10b981;
        background: #f0fdf4;
      }

      .skill-item.acquired:hover {
        border-color: #10b981;
      }

      .skill-badge-icon {
        width: 80px;
        height: 80px;
        margin: 0 auto 15px;
        background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 28px;
        position: relative;
        box-shadow: 0 4px 15px rgba(30, 64, 175, 0.3);
      }

      .skill-badge-icon::before {
        content: "";
        position: absolute;
        top: -3px;
        left: -3px;
        right: -3px;
        bottom: -3px;
        background: linear-gradient(135deg, #1e40af, #3b82f6, #1e40af);
        border-radius: 50%;
        z-index: -1;
      }

      .skill-item.acquired .skill-badge-icon {
        background: linear-gradient(135deg, #059669 0%, #10b981 100%);
        box-shadow: 0 4px 15px rgba(5, 150, 105, 0.3);
      }

      .skill-item.acquired .skill-badge-icon::before {
        background: linear-gradient(135deg, #059669, #10b981, #059669);
      }

      .skill-name {
        color: #333;
        margin-bottom: 10px;
        font-size: 16px;
        font-weight: 600;
      }

      .skill-description {
        color: #666;
        font-size: 14px;
        line-height: 1.5;
        margin-bottom: 15px;
      }

      .acquired-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        background: #10b981;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
      }

      .take-quiz-btn {
        background: #f59e0b;
        color: white;
        padding: 8px 16px;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        text-decoration: none;
        transition: all 0.3s ease;
        font-weight: 500;
      }

      .take-quiz-btn:hover {
        background: #d97706;
        transform: translateY(-1px);
      }

      .badges-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
      }

      @media (min-width: 1200px) {
        .badges-grid {
          grid-template-columns: repeat(3, 1fr);
        }
      }

      .badge-item {
        background: #f8f9fa;
        padding: 25px;
        border-radius: 12px;
        text-align: center;
        border: 2px solid #e1e5e9;
        transition: all 0.3s ease;
      }

      .badge-item:hover {
        border-color: #f59e0b;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .badge-item img {
        width: 80px;
        height: 80px;
        margin-bottom: 15px;
        border-radius: 8px;
      }

      .badge-item h5 {
        color: #333;
        margin-bottom: 10px;
        font-size: 16px;
      }

      .badge-item p {
        color: #666;
        font-size: 14px;
        line-height: 1.5;
        margin-bottom: 10px;
      }

      .badge-date {
        color: #f59e0b;
        font-size: 12px;
        font-weight: 500;
      }

      .no-content {
        text-align: center;
        padding: 30px;
        color: #666;
        font-style: italic;
      }
    </style>
  </head>
  <body>
    <div class="dashboard-wrapper">
      <!-- Sidebar -->
      <%- include('./partials/sidebar', {activePage: 'skills_badges', user: user
      || { name: 'User' }}) %>

      <!-- Main Content Area -->
      <div class="main-content">
        <div class="page-header">
          <div class="page-header-content">
            <h1 class="page-title">Skills & Badges</h1>
            <p class="page-subtitle">
              Earn badges by completing tasks and showcasing your expertise.
              Take quizzes to add new skills to your profile.
            </p>
          </div>
          <button
            id="refreshSkillsHeader"
            style="
              background: #2563eb;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 8px;
              cursor: pointer;
              font-size: 14px;
              font-weight: 500;
              display: flex;
              align-items: center;
              gap: 8px;
              transition: all 0.3s ease;
              white-space: nowrap;
              height: fit-content;
            "
            onmouseover="this.style.background='#1d4ed8'; this.style.transform='translateY(-1px)'"
            onmouseout="this.style.background='#2563eb'; this.style.transform='translateY(0)'"
          >
            <i class="fas fa-sync-alt"></i>
            Refresh Skills
          </button>
        </div>

        <!-- Statistics Cards -->
        <div class="stats-section" style="margin-bottom: 30px">
          <div
            class="stats-grid"
            style="
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
              gap: 20px;
            "
          >
            <div
              class="stat-card"
              style="
                background: white;
                padding: 20px;
                border-radius: 12px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                text-align: center;
                border-left: 4px solid #2563eb;
              "
            >
              <h3
                id="totalSkills"
                style="font-size: 24px; color: #2563eb; margin-bottom: 5px"
              >
                0
              </h3>
              <p style="color: #666; font-size: 14px">Available Skills</p>
            </div>
            <div
              class="stat-card"
              style="
                background: white;
                padding: 20px;
                border-radius: 12px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                text-align: center;
                border-left: 4px solid #10b981;
              "
            >
              <h3
                id="acquiredSkills"
                style="font-size: 24px; color: #10b981; margin-bottom: 5px"
              >
                0
              </h3>
              <p style="color: #666; font-size: 14px">Acquired Skills</p>
            </div>
            <div
              class="stat-card"
              style="
                background: white;
                padding: 20px;
                border-radius: 12px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                text-align: center;
                border-left: 4px solid #f59e0b;
              "
            >
              <h3
                id="progressPercentage"
                style="font-size: 24px; color: #f59e0b; margin-bottom: 5px"
              >
                0%
              </h3>
              <p style="color: #666; font-size: 14px">Progress</p>
            </div>
          </div>
        </div>

        <div class="content-card">
          <!-- Loading Indicator -->
          <div id="loading-indicator" style="text-align: center; padding: 50px">
            <i
              class="fas fa-spinner fa-spin"
              style="font-size: 24px; color: #2563eb"
            ></i>
            <p style="margin-top: 10px; color: #666">
              Loading skills & badges...
            </p>
          </div>

          <!-- Error Message -->
          <div
            id="error-message"
            style="
              display: none;
              text-align: center;
              padding: 50px;
              color: #ef4444;
            "
          >
            <i
              class="fas fa-exclamation-triangle"
              style="font-size: 24px; margin-bottom: 10px"
            ></i>
            <h3>Error loading skills</h3>
            <p>
              Unable to load skills and badges. Please refresh the page and try
              again.
            </p>
            <button
              onclick="loadSkillsData()"
              style="
                margin-top: 15px;
                padding: 10px 20px;
                background: #2563eb;
                color: white;
                border: none;
                border-radius: 6px;
                cursor: pointer;
              "
            >
              Retry
            </button>
          </div>

          <!-- Main Content (Hidden until loaded) -->
          <div id="skills-content" style="display: none">
            <!-- Search and Filter Section -->
            <div
              class="search-filter-section"
              style="
                margin-bottom: 25px;
                padding: 20px;
                background: #f8f9fa;
                border-radius: 8px;
                border-left: 4px solid #2563eb;
              "
            >
              <h4 style="margin-bottom: 15px; color: #333">
                Search & Filter Skills
              </h4>
              <div
                style="
                  display: flex;
                  gap: 15px;
                  flex-wrap: wrap;
                  align-items: center;
                "
              >
                <div>
                  <input
                    type="text"
                    id="skillSearch"
                    placeholder="Search skills..."
                    style="
                      padding: 8px 12px;
                      border: 1px solid #e1e5e9;
                      border-radius: 6px;
                      width: 200px;
                    "
                  />
                  <div
                    id="searchError"
                    style="
                      color: #ef4444;
                      font-size: 12px;
                      margin-top: 5px;
                      display: none;
                    "
                  ></div>
                </div>
                <div>
                  <select
                    id="skillCategory"
                    style="
                      padding: 8px 12px;
                      border: 1px solid #e1e5e9;
                      border-radius: 6px;
                    "
                  >
                    <option value="">All Categories</option>
                    <option value="javascript">JavaScript</option>
                    <option value="python">Python</option>
                    <option value="react">React</option>
                    <option value="design">Design</option>
                    <option value="html">HTML</option>
                    <option value="css">CSS</option>
                    <option value="node">Node.js</option>
                  </select>
                </div>
                <div>
                  <select
                    id="skillStatus"
                    style="
                      padding: 8px 12px;
                      border: 1px solid #e1e5e9;
                      border-radius: 6px;
                    "
                  >
                    <option value="">All Skills</option>
                    <option value="available">Available</option>
                    <option value="acquired">Acquired</option>
                  </select>
                </div>
                <button
                  id="clearFilters"
                  style="
                    padding: 8px 16px;
                    background: #6b7280;
                    color: white;
                    border: none;
                    border-radius: 6px;
                    cursor: pointer;
                  "
                >
                  Clear Filters
                </button>
              </div>
            </div>

            <!-- Available Skills Section -->
            <section class="skills-section">
              <h4 class="section-title">
                <i class="fas fa-plus-circle"></i>
                Available Skills
                <button
                  id="toggleAvailableSkills"
                  style="
                    margin-left: auto;
                    padding: 5px 10px;
                    background: #2563eb;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 12px;
                  "
                >
                  Hide
                </button>
              </h4>
              <div class="available-skills" id="availableSkillsContainer">
                <!-- Available skills will be dynamically loaded here -->
              </div>
            </section>

            <!-- Badges Section -->
            <section class="badges-section">
              <h4 class="section-title">
                <i class="fas fa-medal"></i>
                Your Badges
                <button
                  id="toggleBadges"
                  style="
                    margin-left: auto;
                    padding: 5px 10px;
                    background: #10b981;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 12px;
                  "
                >
                  Hide
                </button>
              </h4>
              <div class="badges-grid" id="badgesContainer">
                <!-- Acquired skills as badges will be dynamically loaded here -->
              </div>
            </section>
          </div>
          <!-- End skills-content -->
        </div>
      </div>
    </div>

    <script>
      let currentSkillsData = [];

      // Load skills data when page loads
      document.addEventListener("DOMContentLoaded", function () {
        loadSkillsData();
        initializeEventListeners();
      });

      async function loadSkillsData() {
        const loadingIndicator = document.getElementById("loading-indicator");
        const errorMessage = document.getElementById("error-message");
        const skillsContent = document.getElementById("skills-content");

        try {
          loadingIndicator.style.display = "block";
          errorMessage.style.display = "none";
          skillsContent.style.display = "none";

          const response = await fetch(
            "/freelancerD/skills_badges/api/refresh"
          );

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();

          loadingIndicator.style.display = "none";

          if (data.success && data.skills) {
            currentSkillsData = data.skills;
            renderSkills(data.skills);
            updateStatistics(data);
            skillsContent.style.display = "block";
          } else {
            throw new Error("Invalid response format");
          }
        } catch (error) {
          console.error("Error loading skills:", error);
          loadingIndicator.style.display = "none";
          errorMessage.style.display = "block";
        }
      }

      function renderSkills(skills) {
        const availableSkillsContainer = document.getElementById(
          "availableSkillsContainer"
        );
        const badgesContainer = document.getElementById("badgesContainer");

        const availableSkills = skills.filter((skill) => !skill.isAcquired);
        const acquiredSkills = skills.filter((skill) => skill.isAcquired);

        // Render available skills
        availableSkillsContainer.innerHTML = availableSkills
          .map(
            (skill) => `
          <div
            class="skill-item"
            data-skill-name="${skill.name.toLowerCase()}"
            data-skill-category="${getSkillCategory(skill.name)}"
            data-skill-status="available"
          >
            <div class="skill-badge-icon">
              ${getSkillIcon(skill.name)}
            </div>
            <h5 class="skill-name">${escapeHtml(skill.name)}</h5>
            <p class="skill-description">
              ${getSkillDescription(skill.name)}
            </p>
            ${
              skill.hasQuiz
                ? `
              <button
                class="take-quiz-btn"
                onclick="startQuiz('${skill.skillId}', '${escapeHtml(
                    skill.name
                  )}')"
              >
                Take Quiz
              </button>
            `
                : ""
            }
          </div>
        `
          )
          .join("");

        // Render acquired skills as badges
        badgesContainer.innerHTML = acquiredSkills
          .map(
            (skill) => `
          <div
            class="badge-item"
            data-skill-name="${skill.name.toLowerCase()}"
            data-skill-category="${getSkillCategory(skill.name)}"
            data-skill-status="acquired"
          >
            <div class="skill-badge-icon" style="width: 80px; height: 80px; margin: 0 auto 15px">
              ${getSkillIcon(skill.name)}
            </div>
            <h5>${escapeHtml(skill.name)}</h5>
            <p>
              ${getBadgeDescription(skill.name)}
            </p>
            <span class="badge-date">
              Earned: ${new Date().toLocaleDateString("en-US", {
                month: "short",
                year: "numeric",
              })}
            </span>
          </div>
        `
          )
          .join("");

        // Apply current filters if any
        applyFilters();
      }

      function getSkillCategory(skillName) {
        const name = skillName.toLowerCase();
        if (name.includes("javascript")) return "javascript";
        if (name.includes("python")) return "python";
        if (name.includes("react")) return "react";
        if (name.includes("html")) return "html";
        if (name.includes("css")) return "css";
        if (name.includes("node")) return "node";
        if (name.includes("design")) return "design";
        return "other";
      }

      function getSkillIcon(skillName) {
        const name = skillName.toLowerCase();
        if (name.includes("javascript"))
          return '<i class="fab fa-js-square"></i>';
        if (name.includes("python")) return '<i class="fab fa-python"></i>';
        if (name.includes("react")) return '<i class="fab fa-react"></i>';
        if (name.includes("html")) return '<i class="fab fa-html5"></i>';
        if (name.includes("css")) return '<i class="fab fa-css3-alt"></i>';
        if (name.includes("node")) return '<i class="fab fa-node-js"></i>';
        if (name.includes("design")) return '<i class="fas fa-palette"></i>';
        return '<i class="fas fa-code"></i>';
      }

      function getSkillDescription(skillName) {
        if (skillName.includes("Beginner")) {
          return `Master the fundamentals of ${skillName.replace(
            " Beginner",
            ""
          )} programming`;
        } else if (skillName.includes("Advanced")) {
          return `Advanced concepts and techniques in ${skillName.replace(
            " Advanced",
            ""
          )}`;
        } else {
          return `Essential skills in ${skillName} development`;
        }
      }

      function getBadgeDescription(skillName) {
        if (skillName.includes("Beginner")) {
          return `Mastered the fundamentals of ${skillName.replace(
            " Beginner",
            ""
          )} programming`;
        } else if (skillName.includes("Advanced")) {
          return `Advanced expertise in ${skillName.replace(" Advanced", "")}`;
        } else {
          return `Certified skills in ${skillName} development`;
        }
      }

      function escapeHtml(text) {
        const div = document.createElement("div");
        div.textContent = text;
        return div.innerHTML;
      }

      function updateStatistics(data) {
        // Animate the numbers
        animateNumber("totalSkills", data.total);
        animateNumber("acquiredSkills", data.acquired);
        const progressPercentage =
          data.total > 0 ? Math.round((data.acquired / data.total) * 100) : 0;
        animateNumber("progressPercentage", progressPercentage, "%");
      }

      function initializeEventListeners() {
        // Existing functionality - keep all the current JavaScript as is
        initializeFormValidation();
        initializeSectionToggling();

        // Event listeners for actions
        document
          .getElementById("clearFilters")
          .addEventListener("click", clearFilters);
        document
          .getElementById("refreshSkillsHeader")
          .addEventListener("click", refreshSkills);
      }
      // Enhanced form validation using DOM manipulation
      function initializeFormValidation() {
        const searchInput = document.getElementById("skillSearch");
        const searchError = document.getElementById("searchError");

        // Real-time search validation
        searchInput.addEventListener("input", function (e) {
          const value = e.target.value.trim();

          // Reset styling
          searchInput.style.borderColor = "";
          searchError.style.display = "none";

          if (value.length > 0 && value.length < 2) {
            searchInput.style.borderColor = "#ef4444";
            searchError.textContent =
              "Search term must be at least 2 characters";
            searchError.style.display = "block";
            return false;
          }

          if (value.length > 50) {
            searchInput.style.borderColor = "#ef4444";
            searchError.textContent = "Search term cannot exceed 50 characters";
            searchError.style.display = "block";
            return false;
          }

          // Special characters validation
          const specialCharPattern = /[<>{}]/;
          if (specialCharPattern.test(value)) {
            searchInput.style.borderColor = "#ef4444";
            searchError.textContent =
              "Special characters < > { } are not allowed";
            searchError.style.display = "block";
            return false;
          }

          // Valid input
          if (value.length >= 2) {
            searchInput.style.borderColor = "#10b981";
          }

          // Apply search filter
          applyFilters();
          return true;
        });

        // Category and status filter validation
        document
          .getElementById("skillCategory")
          .addEventListener("change", applyFilters);
        document
          .getElementById("skillStatus")
          .addEventListener("change", applyFilters);
      }

      // Dynamic HTML implementation for filtering and interactions
      function applyFilters() {
        const searchTerm = document
          .getElementById("skillSearch")
          .value.toLowerCase()
          .trim();
        const category = document.getElementById("skillCategory").value;
        const status = document.getElementById("skillStatus").value;

        const allSkills = document.querySelectorAll(".skill-item, .badge-item");
        let visibleCount = 0;

        allSkills.forEach((skill) => {
          const skillName = skill.getAttribute("data-skill-name");
          const skillCategory = skill.getAttribute("data-skill-category");
          const skillStatus = skill.getAttribute("data-skill-status");

          let shouldShow = true;

          // Apply search filter
          if (searchTerm && !skillName.includes(searchTerm)) {
            shouldShow = false;
          }

          // Apply category filter
          if (category && skillCategory !== category) {
            shouldShow = false;
          }

          // Apply status filter
          if (status && skillStatus !== status) {
            shouldShow = false;
          }

          if (shouldShow) {
            skill.style.display = "block";
            skill.style.animation = "fadeIn 0.3s ease-in";
            visibleCount++;
          } else {
            skill.style.display = "none";
          }
        });

        updateStatistics();
        updateNoResultsMessage(visibleCount);
      }

      function clearFilters() {
        document.getElementById("skillSearch").value = "";
        document.getElementById("skillCategory").value = "";
        document.getElementById("skillStatus").value = "";
        document.getElementById("searchError").style.display = "none";
        document.getElementById("skillSearch").style.borderColor = "";

        const allSkills = document.querySelectorAll(".skill-item, .badge-item");
        allSkills.forEach((skill) => {
          skill.style.display = "block";
          skill.style.animation = "fadeIn 0.3s ease-in";
        });

        updateStatistics();
        updateNoResultsMessage(allSkills.length);
      }

      function updateNoResultsMessage(visibleCount) {
        let noResultsMsg = document.querySelector(".filter-no-results");

        if (visibleCount === 0) {
          if (!noResultsMsg) {
            noResultsMsg = document.createElement("div");
            noResultsMsg.className = "filter-no-results";
            noResultsMsg.style.cssText =
              "text-align: center; padding: 40px; background: white; border-radius: 12px; margin: 20px 0; border: 2px dashed #e1e5e9;";
            noResultsMsg.innerHTML = `
              <i class="fas fa-search" style="font-size: 48px; color: #e1e5e9; margin-bottom: 15px;"></i>
              <h3 style="color: #666; margin-bottom: 10px;">No skills found</h3>
              <p style="color: #999;">Try adjusting your search or filter criteria</p>
              <button onclick="clearFilters()" style="margin-top: 15px; padding: 8px 16px; background: #2563eb; color: white; border: none; border-radius: 6px; cursor: pointer;">Clear All Filters</button>
            `;
            document.querySelector(".content-card").appendChild(noResultsMsg);
          }
          noResultsMsg.style.display = "block";
        } else if (noResultsMsg) {
          noResultsMsg.style.display = "none";
        }
      }

      // AJAX functionality for skill operations
      async function refreshSkills() {
        try {
          showNotification("Refreshing skills data...", "info");
          await loadSkillsData();
          showNotification("Skills refreshed successfully!", "success");
        } catch (error) {
          console.error("Error refreshing skills:", error);
          showNotification(
            "Failed to refresh skills. Please try again.",
            "error"
          );
        }
      }

      async function startQuiz(skillId, skillName) {
        try {
          showNotification(`Starting quiz for ${skillName}...`, "info");

          const response = await fetch(
            `/freelancerD/skills_badges/quiz/${skillId}/start`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          if (!response.ok) throw new Error("Failed to start quiz");

          const data = await response.json();

          if (data.quizUrl) {
            window.location.href = data.quizUrl;
          } else {
            throw new Error("Quiz URL not provided");
          }
        } catch (error) {
          console.error("Error starting quiz:", error);
          showNotification("Failed to start quiz. Please try again.", "error");
        }
      }

      async function downloadProgress() {
        try {
          showNotification("Generating progress report...", "info");

          const response = await fetch(
            "/freelancerD/skills_badges/api/progress-report",
            {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          if (!response.ok) throw new Error("Failed to generate report");

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.style.display = "none";
          a.href = url;
          a.download = "skills-progress-report.pdf";
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);

          showNotification(
            "Progress report downloaded successfully!",
            "success"
          );
        } catch (error) {
          console.error("Error downloading progress:", error);
          showNotification("Failed to download progress report.", "error");
        }
      }

      function shareProgress() {
        const totalSkills = currentSkillsData.length;
        const acquiredSkills = currentSkillsData.filter(
          (skill) => skill.isAcquired
        ).length;
        const progressPercentage =
          totalSkills > 0
            ? Math.round((acquiredSkills / totalSkills) * 100)
            : 0;

        const shareText = `I've acquired ${acquiredSkills} out of ${totalSkills} skills (${progressPercentage}% progress) on ZeroGravity! 🚀`;

        if (navigator.share) {
          navigator
            .share({
              title: "My Skill Progress",
              text: shareText,
              url: window.location.href,
            })
            .then(() => {
              showNotification("Progress shared successfully!", "success");
            })
            .catch((error) => {
              fallbackShare(shareText);
            });
        } else {
          fallbackShare(shareText);
        }
      }

      function fallbackShare(text) {
        if (navigator.clipboard) {
          navigator.clipboard
            .writeText(text)
            .then(() => {
              showNotification("Progress text copied to clipboard!", "success");
            })
            .catch(() => {
              showNotification("Unable to copy to clipboard.", "error");
            });
        } else {
          // Fallback for older browsers
          const textArea = document.createElement("textarea");
          textArea.value = text;
          document.body.appendChild(textArea);
          textArea.select();
          try {
            document.execCommand("copy");
            showNotification("Progress text copied to clipboard!", "success");
          } catch (err) {
            showNotification("Unable to copy to clipboard.", "error");
          }
          document.body.removeChild(textArea);
        }
      }

      function updateStatistics() {
        const totalSkills = currentSkillsData.length;
        const acquiredSkills = currentSkillsData.filter(
          (skill) => skill.isAcquired
        ).length;
        const progressPercentage =
          totalSkills > 0
            ? Math.round((acquiredSkills / totalSkills) * 100)
            : 0;

        // Animate the numbers
        animateNumber("totalSkills", totalSkills);
        animateNumber("acquiredSkills", acquiredSkills);
        animateNumber("progressPercentage", progressPercentage, "%");
      }

      function animateNumber(elementId, targetValue, suffix = "") {
        const element = document.getElementById(elementId);
        const currentValue = parseInt(element.textContent) || 0;
        const increment = targetValue > currentValue ? 1 : -1;
        const duration = 1000; // 1 second
        const steps = Math.abs(targetValue - currentValue);
        const stepDuration = steps > 0 ? duration / steps : 0;

        if (steps === 0) return;

        let current = currentValue;
        const timer = setInterval(() => {
          current += increment;
          element.textContent = current + suffix;

          if (current === targetValue) {
            clearInterval(timer);
          }
        }, stepDuration);
      }

      function showNotification(message, type = "info") {
        const existingNotification = document.querySelector(".notification");
        if (existingNotification) {
          existingNotification.remove();
        }

        const notification = document.createElement("div");
        notification.className = "notification";
        notification.style.cssText = `
          position: fixed; top: 20px; right: 20px; z-index: 1000;
          padding: 15px 20px; border-radius: 8px; color: white; font-weight: 500;
          background: ${
            type === "success"
              ? "#10b981"
              : type === "error"
              ? "#ef4444"
              : "#2563eb"
          };
          box-shadow: 0 4px 15px rgba(0,0,0,0.2);
          animation: slideIn 0.3s ease-out; max-width: 300px;
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
          notification.style.animation = "slideOut 0.3s ease-in";
          setTimeout(() => notification.remove(), 300);
        }, 3000);
      }

      // Dynamic section toggling
      function initializeSectionToggling() {
        document
          .getElementById("toggleAvailableSkills")
          .addEventListener("click", function () {
            const container = document.getElementById(
              "availableSkillsContainer"
            );
            const button = this;

            if (container.style.display === "none") {
              container.style.display = "grid";
              container.style.animation = "fadeIn 0.3s ease-in";
              button.textContent = "Hide";
            } else {
              container.style.display = "none";
              button.textContent = "Show";
            }
          });

        document
          .getElementById("toggleBadges")
          .addEventListener("click", function () {
            const container = document.getElementById("badgesContainer");
            const button = this;

            if (container.style.display === "none") {
              container.style.display = "grid";
              container.style.animation = "fadeIn 0.3s ease-in";
              button.textContent = "Hide";
            } else {
              container.style.display = "none";
              button.textContent = "Show";
            }
          });
      }

      // Add CSS animations and styles
      const style = document.createElement("style");
      style.textContent = `
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideIn {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
          from { transform: translateX(0); opacity: 1; }
          to { transform: translateX(100%); opacity: 0; }
        }
        .skill-item:hover, .badge-item:hover {
          transform: translateY(-5px);
          box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        .take-quiz-btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 15px rgba(245, 158, 11, 0.3);
        }
      `;
      document.head.appendChild(style);

      // Initialize all functionality when page loads
      document.addEventListener("DOMContentLoaded", function () {
        initializeFormValidation();
        initializeSectionToggling();
        updateStatistics();

        // Initial filter application
        applyFilters();
      });
    </script>
  </body>
</html>
